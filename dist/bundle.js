(()=>{var t={6745:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(4417),n=i.glob.performance&&i.glob.performance.now?function(){return i.glob.performance.now()}:function(){return(new Date).getTime()},o=function(){function t(e,r){this.id=t.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:n(),frameRate:0},this.func=e,this.setLayers(r)}return t.prototype.setLayers=function(t){var e;return e=t?t.length>0?t:[t]:[],this.layers=e,this},t.prototype.getLayers=function(){return this.layers},t.prototype.addLayer=function(t){var e,r=this.layers,i=r.length;for(e=0;e<i;e++)if(r[e]._id===t._id)return!1;return this.layers.push(t),!0},t.prototype.isRunning=function(){var e,r=t.animations,i=r.length;for(e=0;e<i;e++)if(r[e].id===this.id)return!0;return!1},t.prototype.start=function(){return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=n(),t._addAnimation(this),this},t.prototype.stop=function(){return t._removeAnimation(this),this},t.prototype._updateFrameObject=function(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff},t._addAnimation=function(t){this.animations.push(t),this._handleAnimation()},t._removeAnimation=function(t){var e,r=t.id,i=this.animations,n=i.length;for(e=0;e<n;e++)if(i[e].id===r){this.animations.splice(e,1);break}},t._runFrames=function(){var t,e,r,i,o,a,s,h,c={},l=this.animations;for(i=0;i<l.length;i++)if(e=(t=l[i]).layers,r=t.func,t._updateFrameObject(n()),a=e.length,!r||!1!==r.call(t,t.frame))for(o=0;o<a;o++)void 0!==(s=e[o])._id&&(c[s._id]=s);for(h in c)c.hasOwnProperty(h)&&c[h].draw()},t._animationLoop=function(){var e=t;e.animations.length?(e._runFrames(),requestAnimationFrame(e._animationLoop)):e.animRunning=!1},t._handleAnimation=function(){this.animRunning||(this.animRunning=!0,requestAnimationFrame(this._animationLoop))},t.animations=[],t.animIdCounter=0,t.animRunning=!1,t}();e.Animation=o},4842:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o,a=r(8588),s=r(3442),h=r(4417),c=r(1455),l=r(3774),d=function(){function t(t){this.pixelRatio=1,this.width=0,this.height=0,this.isCache=!1;var e=(t||{}).pixelRatio||h.Konva.pixelRatio||function(){if(o)return o;var t=a.Util.createCanvasElement().getContext("2d");return o=(h.Konva._global.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)}();this.pixelRatio=e,this._canvas=a.Util.createCanvasElement(),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.border="0",this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0"}return t.prototype.getContext=function(){return this.context},t.prototype.getPixelRatio=function(){return this.pixelRatio},t.prototype.setPixelRatio=function(t){var e=this.pixelRatio;this.pixelRatio=t,this.setSize(this.getWidth()/e,this.getHeight()/e)},t.prototype.setWidth=function(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},t.prototype.setHeight=function(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},t.prototype.getWidth=function(){return this.width},t.prototype.getHeight=function(){return this.height},t.prototype.setSize=function(t,e){this.setWidth(t||0),this.setHeight(e||0)},t.prototype.toDataURL=function(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return a.Util.error("Unable to get data URL. "+t.message+" For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."),""}}},t}();e.Canvas=d,c.Factory.addGetterSetter(d,"pixelRatio",void 0,l.getNumberValidator());var u=function(t){function e(e){void 0===e&&(e={width:0,height:0});var r=t.call(this,e)||this;return r.context=new s.SceneContext(r),r.setSize(e.width,e.height),r}return n(e,t),e}(d);e.SceneCanvas=u;var p=function(t){function e(e){void 0===e&&(e={width:0,height:0});var r=t.call(this,e)||this;return r.hitCanvas=!0,r.context=new s.HitContext(r),r.setSize(e.width,e.height),r}return n(e,t),e}(d);e.HitCanvas=p},8783:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7939),h=r(3774),c=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.children=new o.Collection,e}return n(e,t),e.prototype.getChildren=function(t){if(!t)return this.children;var e=new o.Collection;return this.children.each((function(r){t(r)&&e.push(r)})),e},e.prototype.hasChildren=function(){return this.getChildren().length>0},e.prototype.removeChildren=function(){for(var t,e=0;e<this.children.length;e++)(t=this.children[e]).parent=null,t.index=0,t.remove();return this.children=new o.Collection,this},e.prototype.destroyChildren=function(){for(var t,e=0;e<this.children.length;e++)(t=this.children[e]).parent=null,t.index=0,t.destroy();return this.children=new o.Collection,this},e.prototype.add=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(arguments.length>1){for(var r=0;r<arguments.length;r++)this.add(arguments[r]);return this}var i=t[0];if(i.getParent())return i.moveTo(this),this;var n=this.children;return this._validateAdd(i),i._clearCaches(),i.index=n.length,i.parent=this,n.push(i),this._fire("add",{child:i}),this},e.prototype.destroy=function(){return this.hasChildren()&&this.destroyChildren(),t.prototype.destroy.call(this),this},e.prototype.find=function(t){return this._generalFind(t,!1)},e.prototype.get=function(t){return o.Util.warn("collection.get() method is deprecated. Please use collection.find() instead."),this.find(t)},e.prototype.findOne=function(t){var e=this._generalFind(t,!0);return e.length>0?e[0]:void 0},e.prototype._generalFind=function(t,e){var r=[];return this._descendants((function(i){var n=i._isMatch(t);return n&&r.push(i),!(!n||!e)})),o.Collection.toCollection(r)},e.prototype._descendants=function(t){for(var e=0;e<this.children.length;e++){var r=this.children[e];if(t(r))return!0;if(r.hasChildren()&&r._descendants(t))return!0}return!1},e.prototype.toObject=function(){var t=s.Node.prototype.toObject.call(this);t.children=[];for(var e=this.getChildren(),r=e.length,i=0;i<r;i++){var n=e[i];t.children.push(n.toObject())}return t},e.prototype.isAncestorOf=function(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1},e.prototype.clone=function(t){var e=s.Node.prototype.clone.call(this,t);return this.getChildren().each((function(t){e.add(t.clone())})),e},e.prototype.getAllIntersections=function(t){var e=[];return this.find("Shape").each((function(r){r.isVisible()&&r.intersects(t)&&e.push(r)})),e},e.prototype._setChildrenIndices=function(){this.children.each((function(t,e){t.index=e}))},e.prototype.drawScene=function(t,e){var r=this.getLayer(),i=t||r&&r.getCanvas(),n=i&&i.getContext(),o=this._getCanvasCache(),a=o&&o.scene,s=i&&i.isCache;if(!this.isVisible()&&!s)return this;if(a){n.save();var h=this.getAbsoluteTransform(e).getMatrix();n.transform(h[0],h[1],h[2],h[3],h[4],h[5]),this._drawCachedSceneCanvas(n),n.restore()}else this._drawChildren("drawScene",i,e);return this},e.prototype.drawHit=function(t,e){if(!this.shouldDrawHit(e))return this;var r=this.getLayer(),i=t||r&&r.hitCanvas,n=i&&i.getContext(),o=this._getCanvasCache();if(o&&o.hit){n.save();var a=this.getAbsoluteTransform(e).getMatrix();n.transform(a[0],a[1],a[2],a[3],a[4],a[5]),this._drawCachedHitCanvas(n),n.restore()}else this._drawChildren("drawHit",i,e);return this},e.prototype._drawChildren=function(t,e,r){var i=e&&e.getContext(),n=this.clipWidth(),o=this.clipHeight(),a=this.clipFunc(),s=n&&o||a,h=r===this;if(s){i.save();var c=this.getAbsoluteTransform(r),l=c.getMatrix();if(i.transform(l[0],l[1],l[2],l[3],l[4],l[5]),i.beginPath(),a)a.call(this,i,this);else{var d=this.clipX(),u=this.clipY();i.rect(d,u,n,o)}i.clip(),l=c.copy().invert().getMatrix(),i.transform(l[0],l[1],l[2],l[3],l[4],l[5])}var p=!h&&"source-over"!==this.globalCompositeOperation()&&"drawScene"===t;p&&(i.save(),i._applyGlobalCompositeOperation(this)),this.children.each((function(i){i[t](e,r)})),p&&i.restore(),s&&i.restore()},e.prototype.getClientRect=function(t){var e,r,i,n,o,a=(t=t||{}).skipTransform,s=t.relativeTo,h=this;this.children.each((function(o){if(o.visible()){var a=o.getClientRect({relativeTo:h,skipShadow:t.skipShadow,skipStroke:t.skipStroke});0===a.width&&0===a.height||(void 0===e?(e=a.x,r=a.y,i=a.x+a.width,n=a.y+a.height):(e=Math.min(e,a.x),r=Math.min(r,a.y),i=Math.max(i,a.x+a.width),n=Math.max(n,a.y+a.height)))}}));for(var c=this.find("Shape"),l=!1,d=0;d<c.length;d++)if(c[d]._isVisible(this)){l=!0;break}return o=l&&void 0!==e?{x:e,y:r,width:i-e,height:n-r}:{x:0,y:0,width:0,height:0},a?o:this._transformedRect(o,s)},e}(s.Node);e.Container=c,a.Factory.addComponentsGetterSetter(c,"clip",["x","y","width","height"]),a.Factory.addGetterSetter(c,"clipX",void 0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"clipY",void 0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"clipWidth",void 0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"clipHeight",void 0,h.getNumberValidator()),a.Factory.addGetterSetter(c,"clipFunc"),o.Collection.mapMethods(c)},3442:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(4417),s=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","ellipse","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"],h=function(){function t(t){this.canvas=t,this._context=t._canvas.getContext("2d"),a.Konva.enableTrace&&(this.traceArr=[],this._enableTrace())}return t.prototype.fillShape=function(t){t.fillEnabled()&&this._fill(t)},t.prototype._fill=function(t){},t.prototype.strokeShape=function(t){t.hasStroke()&&this._stroke(t)},t.prototype._stroke=function(t){},t.prototype.fillStrokeShape=function(t){t.attrs.fillAfterStrokeEnabled?(this.strokeShape(t),this.fillShape(t)):(this.fillShape(t),this.strokeShape(t))},t.prototype.getTrace=function(t){var e,r,i,n,a=this.traceArr,s=a.length,h="";for(e=0;e<s;e++)(i=(r=a[e]).method)?(n=r.args,h+=i,t?h+="()":o.Util._isArray(n[0])?h+="(["+n.join(",")+"])":h+="("+n.join(",")+")"):(h+=r.property,t||(h+="="+r.val)),h+=";";return h},t.prototype.clearTrace=function(){this.traceArr=[]},t.prototype._trace=function(t){var e=this.traceArr;e.push(t),e.length>=100&&e.shift()},t.prototype.reset=function(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)},t.prototype.getCanvas=function(){return this.canvas},t.prototype.clear=function(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth()/e.pixelRatio,e.getHeight()/e.pixelRatio)},t.prototype._applyLineCap=function(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)},t.prototype._applyOpacity=function(t){var e=t.getAbsoluteOpacity();1!==e&&this.setAttr("globalAlpha",e)},t.prototype._applyLineJoin=function(t){var e=t.attrs.lineJoin;e&&this.setAttr("lineJoin",e)},t.prototype.setAttr=function(t,e){this._context[t]=e},t.prototype.arc=function(t,e,r,i,n,o){this._context.arc(t,e,r,i,n,o)},t.prototype.arcTo=function(t,e,r,i,n){this._context.arcTo(t,e,r,i,n)},t.prototype.beginPath=function(){this._context.beginPath()},t.prototype.bezierCurveTo=function(t,e,r,i,n,o){this._context.bezierCurveTo(t,e,r,i,n,o)},t.prototype.clearRect=function(t,e,r,i){this._context.clearRect(t,e,r,i)},t.prototype.clip=function(){this._context.clip()},t.prototype.closePath=function(){this._context.closePath()},t.prototype.createImageData=function(t,e){var r=arguments;return 2===r.length?this._context.createImageData(t,e):1===r.length?this._context.createImageData(t):void 0},t.prototype.createLinearGradient=function(t,e,r,i){return this._context.createLinearGradient(t,e,r,i)},t.prototype.createPattern=function(t,e){return this._context.createPattern(t,e)},t.prototype.createRadialGradient=function(t,e,r,i,n,o){return this._context.createRadialGradient(t,e,r,i,n,o)},t.prototype.drawImage=function(t,e,r,i,n,o,a,s,h){var c=arguments,l=this._context;3===c.length?l.drawImage(t,e,r):5===c.length?l.drawImage(t,e,r,i,n):9===c.length&&l.drawImage(t,e,r,i,n,o,a,s,h)},t.prototype.ellipse=function(t,e,r,i,n,o,a,s){this._context.ellipse(t,e,r,i,n,o,a,s)},t.prototype.isPointInPath=function(t,e){return this._context.isPointInPath(t,e)},t.prototype.fill=function(){this._context.fill()},t.prototype.fillRect=function(t,e,r,i){this._context.fillRect(t,e,r,i)},t.prototype.strokeRect=function(t,e,r,i){this._context.strokeRect(t,e,r,i)},t.prototype.fillText=function(t,e,r){this._context.fillText(t,e,r)},t.prototype.measureText=function(t){return this._context.measureText(t)},t.prototype.getImageData=function(t,e,r,i){return this._context.getImageData(t,e,r,i)},t.prototype.lineTo=function(t,e){this._context.lineTo(t,e)},t.prototype.moveTo=function(t,e){this._context.moveTo(t,e)},t.prototype.rect=function(t,e,r,i){this._context.rect(t,e,r,i)},t.prototype.putImageData=function(t,e,r){this._context.putImageData(t,e,r)},t.prototype.quadraticCurveTo=function(t,e,r,i){this._context.quadraticCurveTo(t,e,r,i)},t.prototype.restore=function(){this._context.restore()},t.prototype.rotate=function(t){this._context.rotate(t)},t.prototype.save=function(){this._context.save()},t.prototype.scale=function(t,e){this._context.scale(t,e)},t.prototype.setLineDash=function(t){this._context.setLineDash?this._context.setLineDash(t):"mozDash"in this._context?this._context.mozDash=t:"webkitLineDash"in this._context&&(this._context.webkitLineDash=t)},t.prototype.getLineDash=function(){return this._context.getLineDash()},t.prototype.setTransform=function(t,e,r,i,n,o){this._context.setTransform(t,e,r,i,n,o)},t.prototype.stroke=function(){this._context.stroke()},t.prototype.strokeText=function(t,e,r,i){this._context.strokeText(t,e,r,i)},t.prototype.transform=function(t,e,r,i,n,o){this._context.transform(t,e,r,i,n,o)},t.prototype.translate=function(t,e){this._context.translate(t,e)},t.prototype._enableTrace=function(){var t,e,r=this,i=s.length,n=o.Util._simplifyArray,a=this.setAttr,h=function(t){var i,o=r[t];r[t]=function(){return e=n(Array.prototype.slice.call(arguments,0)),i=o.apply(r,arguments),r._trace({method:t,args:e}),i}};for(t=0;t<i;t++)h(s[t]);r.setAttr=function(){a.apply(r,arguments);var t=arguments[0],e=arguments[1];"shadowOffsetX"!==t&&"shadowOffsetY"!==t&&"shadowBlur"!==t||(e/=this.canvas.getPixelRatio()),r._trace({property:t,val:e})}},t.prototype._applyGlobalCompositeOperation=function(t){var e=t.getGlobalCompositeOperation();"source-over"!==e&&this.setAttr("globalCompositeOperation",e)},t}();e.Context=h,["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation","imageSmoothingEnabled"].forEach((function(t){Object.defineProperty(h.prototype,t,{get:function(){return this._context[t]},set:function(e){this._context[t]=e}})}));var c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._fillColor=function(t){var e=t.fill();this.setAttr("fillStyle",e),t._fillFunc(this)},e.prototype._fillPattern=function(t){var e=t.getFillPatternX(),r=t.getFillPatternY(),i=a.Konva.getAngle(t.getFillPatternRotation()),n=t.getFillPatternOffsetX(),o=t.getFillPatternOffsetY();t.getFillPatternScaleX(),t.getFillPatternScaleY(),(e||r)&&this.translate(e||0,r||0),i&&this.rotate(i),(n||o)&&this.translate(-1*n,-1*o),this.setAttr("fillStyle",t._getFillPattern()),t._fillFunc(this)},e.prototype._fillLinearGradient=function(t){var e=t._getLinearGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))},e.prototype._fillRadialGradient=function(t){var e=t._getRadialGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))},e.prototype._fill=function(t){var e=t.fill(),r=t.getFillPriority();if(e&&"color"===r)this._fillColor(t);else{var i=t.getFillPatternImage();if(i&&"pattern"===r)this._fillPattern(t);else{var n=t.getFillLinearGradientColorStops();if(n&&"linear-gradient"===r)this._fillLinearGradient(t);else{var o=t.getFillRadialGradientColorStops();o&&"radial-gradient"===r?this._fillRadialGradient(t):e?this._fillColor(t):i?this._fillPattern(t):n?this._fillLinearGradient(t):o&&this._fillRadialGradient(t)}}}},e.prototype._strokeLinearGradient=function(t){var e=t.getStrokeLinearGradientStartPoint(),r=t.getStrokeLinearGradientEndPoint(),i=t.getStrokeLinearGradientColorStops(),n=this.createLinearGradient(e.x,e.y,r.x,r.y);if(i){for(var o=0;o<i.length;o+=2)n.addColorStop(i[o],i[o+1]);this.setAttr("strokeStyle",n)}},e.prototype._stroke=function(t){var e=t.dash(),r=t.getStrokeScaleEnabled();if(t.hasStroke()){if(!r){this.save();var i=this.getCanvas().getPixelRatio();this.setTransform(i,0,0,i,0,0)}this._applyLineCap(t),e&&t.dashEnabled()&&(this.setLineDash(e),this.setAttr("lineDashOffset",t.dashOffset())),this.setAttr("lineWidth",t.strokeWidth()),t.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),t.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(t):this.setAttr("strokeStyle",t.stroke()),t._strokeFunc(this),r||this.restore()}},e.prototype._applyShadow=function(t){var e=o.Util,r=e.get(t.getShadowRGBA(),"black"),i=e.get(t.getShadowBlur(),5),n=e.get(t.getShadowOffset(),{x:0,y:0}),a=t.getAbsoluteScale(),s=this.canvas.getPixelRatio(),h=a.x*s,c=a.y*s;this.setAttr("shadowColor",r),this.setAttr("shadowBlur",i*Math.min(Math.abs(h),Math.abs(c))),this.setAttr("shadowOffsetX",n.x*h),this.setAttr("shadowOffsetY",n.y*c)},e}(h);e.SceneContext=c;var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._fill=function(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()},e.prototype.strokeShape=function(t){t.hasHitStroke()&&this._stroke(t)},e.prototype._stroke=function(t){if(t.hasHitStroke()){var e=t.getStrokeScaleEnabled();if(!e){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(t);var i=t.hitStrokeWidth(),n="auto"===i?t.strokeWidth():i;this.setAttr("lineWidth",n),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this),e||this.restore()}},e}(h);e.HitContext=l},210:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(4417),n=r(8588);e.DD={get isDragging(){var t=!1;return e.DD._dragElements.forEach((function(e){"dragging"===e.dragStatus&&(t=!0)})),t},justDragged:!1,get node(){var t;return e.DD._dragElements.forEach((function(e){t=e.node})),t},_dragElements:new Map,_drag:function(t){var r=[];e.DD._dragElements.forEach((function(e,i){var o=e.node,a=o.getStage();a.setPointersPositions(t),void 0===e.pointerId&&(e.pointerId=n.Util._getFirstPointerId(t));var s=a._changedPointerPositions.find((function(t){return t.id===e.pointerId}));if(s){if("dragging"!==e.dragStatus){var h=o.dragDistance();if(Math.max(Math.abs(s.x-e.startPointerPos.x),Math.abs(s.y-e.startPointerPos.y))<h)return;if(o.startDrag({evt:t}),!o.isDragging())return}o._setDragPosition(t,e),r.push(o)}})),r.forEach((function(e){e.fire("dragmove",{type:"dragmove",target:e,evt:t},!0)}))},_endDragBefore:function(t){e.DD._dragElements.forEach((function(r,n){var o=r.node.getStage();if(t&&o.setPointersPositions(t),o._changedPointerPositions.find((function(t){return t.id===r.pointerId}))){"dragging"!==r.dragStatus&&"stopped"!==r.dragStatus||(e.DD.justDragged=!0,i.Konva.listenClickTap=!1,r.dragStatus="stopped");var a=r.node.getLayer()||r.node instanceof i.Konva.Stage&&r.node;a&&a.batchDraw()}}))},_endDragAfter:function(t){e.DD._dragElements.forEach((function(r,i){"stopped"===r.dragStatus&&r.node.fire("dragend",{type:"dragend",target:r.node,evt:t},!0),"dragging"!==r.dragStatus&&e.DD._dragElements.delete(i)}))}},i.Konva.isBrowser&&(window.addEventListener("mouseup",e.DD._endDragBefore,!0),window.addEventListener("touchend",e.DD._endDragBefore,!0),window.addEventListener("mousemove",e.DD._drag),window.addEventListener("touchmove",e.DD._drag),window.addEventListener("mouseup",e.DD._endDragAfter,!1),window.addEventListener("touchend",e.DD._endDragAfter,!1))},1455:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(8588),n=r(3774),o="get",a="set";e.Factory={addGetterSetter:function(t,r,i,n,o){e.Factory.addGetter(t,r,i),e.Factory.addSetter(t,r,n,o),e.Factory.addOverloadedGetterSetter(t,r)},addGetter:function(t,e,r){var n=o+i.Util._capitalize(e);t.prototype[n]=t.prototype[n]||function(){var t=this.attrs[e];return void 0===t?r:t}},addSetter:function(t,r,n,o){var s=a+i.Util._capitalize(r);t.prototype[s]||e.Factory.overWriteSetter(t,r,n,o)},overWriteSetter:function(t,e,r,n){var o=a+i.Util._capitalize(e);t.prototype[o]=function(t){return r&&null!=t&&(t=r.call(this,t,e)),this._setAttr(e,t),n&&n.call(this),this}},addComponentsGetterSetter:function(t,r,s,h,c){var l,d,u=s.length,p=i.Util._capitalize,f=o+p(r),g=a+p(r);t.prototype[f]=function(){var t={};for(l=0;l<u;l++)t[d=s[l]]=this.getAttr(r+p(d));return t};var y=n.getComponentValidator(s);t.prototype[g]=function(t){var e,i=this.attrs[r];for(e in h&&(t=h.call(this,t)),y&&y.call(this,t,r),t)t.hasOwnProperty(e)&&this._setAttr(r+p(e),t[e]);return this._fireChangeEvent(r,i,t),c&&c.call(this),this},e.Factory.addOverloadedGetterSetter(t,r)},addOverloadedGetterSetter:function(t,e){var r=i.Util._capitalize(e),n=a+r,s=o+r;t.prototype[e]=function(){return arguments.length?(this[n](arguments[0]),this):this[s]()}},addDeprecatedGetterSetter:function(t,r,n,a){i.Util.error("Adding deprecated "+r);var s=o+i.Util._capitalize(r),h=r+" property is deprecated and will be removed soon. Look at Konva change log for more information.";t.prototype[s]=function(){i.Util.error(h);var t=this.attrs[r];return void 0===t?n:t},e.Factory.addSetter(t,r,a,(function(){i.Util.error(h)})),e.Factory.addOverloadedGetterSetter(t,r)},backCompat:function(t,e){i.Util.each(e,(function(e,r){var n=t.prototype[r],s=o+i.Util._capitalize(e),h=a+i.Util._capitalize(e);function c(){n.apply(this,arguments),i.Util.error('"'+e+'" method is deprecated and will be removed soon. Use ""'+r+'" instead.')}t.prototype[e]=c,t.prototype[s]=c,t.prototype[h]=c}))},afterSetFilter:function(){this._filterUpToDate=!1}}},3980:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(4415),s=r(4417),h=function(t){function e(e){var r=t.call(this,e)||this;return r.listening(!1),o.Util.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.'),r}return n(e,t),e}(a.Layer);e.FastLayer=h,h.prototype.nodeType="FastLayer",s._registerNode(h),o.Collection.mapMethods(h)},4417:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=Math.PI/180,n=function(t){var e=t.indexOf("msie ");if(e>0)return parseInt(t.substring(e+5,t.indexOf(".",e)),10);if(t.indexOf("trident/")>0){var r=t.indexOf("rv:");return parseInt(t.substring(r+3,t.indexOf(".",r)),10)}var i=t.indexOf("edge/");return i>0&&parseInt(t.substring(i+5,t.indexOf(".",i)),10)};e._parseUA=function(t){var e=t.toLowerCase(),r=/(chrome)[ /]([\w.]+)/.exec(e)||/(webkit)[ /]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ /]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],i=!!t.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),o=!!t.match(/IEMobile/i);return{browser:r[1]||"",version:r[2]||"0",isIE:n(e),mobile:i,ieMobile:o}},e.glob=void 0!==r.g?r.g:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{},e.Konva={_global:e.glob,version:"7.2.0",isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/param/.test(function(t){}.toString()),dblClickWindow:400,getAngle:function(t){return e.Konva.angleDeg?t*i:t},enableTrace:!1,_pointerEventsEnabled:!1,hitOnDragEnabled:!1,captureTouchEventsEnabled:!1,listenClickTap:!1,inDblClickWindow:!1,pixelRatio:void 0,dragDistance:3,angleDeg:!0,showWarnings:!0,dragButtons:[0,1],isDragging:function(){return e.Konva.DD.isDragging},isDragReady:function(){return!!e.Konva.DD.node},UA:e._parseUA(e.glob.navigator&&e.glob.navigator.userAgent||""),document:e.glob.document,_injectGlobal:function(t){e.glob.Konva=t},_parseUA:e._parseUA},e._NODES_REGISTRY={},e._registerNode=function(t){e._NODES_REGISTRY[t.prototype.getClassName()]=t,e.Konva[t.prototype.getClassName()]=t}},8985:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(8783),s=r(4417),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._validateAdd=function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&o.Util.throw("You may only add groups and shapes to groups.")},e}(a.Container);e.Group=h,h.prototype.nodeType="Group",s._registerNode(h),o.Collection.mapMethods(h)},4415:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(8783),s=r(7939),h=r(1455),c=r(4842),l=r(3774),d=r(7955),u=r(4417),p=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],f=p.length,g=function(t){function e(e){var r=t.call(this,e)||this;return r.canvas=new c.SceneCanvas,r.hitCanvas=new c.HitCanvas({pixelRatio:1}),r._waitingForDraw=!1,r.on("visibleChange.konva",r._checkVisibility),r._checkVisibility(),r.on("imageSmoothingEnabledChange.konva",r._setSmoothEnabled),r._setSmoothEnabled(),r}return n(e,t),e.prototype.createPNGStream=function(){return this.canvas._canvas.createPNGStream()},e.prototype.getCanvas=function(){return this.canvas},e.prototype.getHitCanvas=function(){return this.hitCanvas},e.prototype.getContext=function(){return this.getCanvas().getContext()},e.prototype.clear=function(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this},e.prototype.setZIndex=function(e){t.prototype.setZIndex.call(this,e);var r=this.getStage();return r&&(r.content.removeChild(this.getCanvas()._canvas),e<r.children.length-1?r.content.insertBefore(this.getCanvas()._canvas,r.children[e+1].getCanvas()._canvas):r.content.appendChild(this.getCanvas()._canvas)),this},e.prototype.moveToTop=function(){s.Node.prototype.moveToTop.call(this);var t=this.getStage();return t&&(t.content.removeChild(this.getCanvas()._canvas),t.content.appendChild(this.getCanvas()._canvas)),!0},e.prototype.moveUp=function(){if(!s.Node.prototype.moveUp.call(this))return!1;var t=this.getStage();return!!t&&(t.content.removeChild(this.getCanvas()._canvas),this.index<t.children.length-1?t.content.insertBefore(this.getCanvas()._canvas,t.children[this.index+1].getCanvas()._canvas):t.content.appendChild(this.getCanvas()._canvas),!0)},e.prototype.moveDown=function(){if(s.Node.prototype.moveDown.call(this)){var t=this.getStage();if(t){var e=t.children;t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[this.index+1].getCanvas()._canvas)}return!0}return!1},e.prototype.moveToBottom=function(){if(s.Node.prototype.moveToBottom.call(this)){var t=this.getStage();if(t){var e=t.children;t.content.removeChild(this.getCanvas()._canvas),t.content.insertBefore(this.getCanvas()._canvas,e[1].getCanvas()._canvas)}return!0}return!1},e.prototype.getLayer=function(){return this},e.prototype.remove=function(){var t=this.getCanvas()._canvas;return s.Node.prototype.remove.call(this),t&&t.parentNode&&o.Util._isInDocument(t)&&t.parentNode.removeChild(t),this},e.prototype.getStage=function(){return this.parent},e.prototype.setSize=function(t){var e=t.width,r=t.height;return this.canvas.setSize(e,r),this.hitCanvas.setSize(e,r),this._setSmoothEnabled(),this},e.prototype._validateAdd=function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&o.Util.throw("You may only add groups and shapes to a layer.")},e.prototype._toKonvaCanvas=function(t){return(t=t||{}).width=t.width||this.getWidth(),t.height=t.height||this.getHeight(),t.x=void 0!==t.x?t.x:this.x(),t.y=void 0!==t.y?t.y:this.y(),s.Node.prototype._toKonvaCanvas.call(this,t)},e.prototype._checkVisibility=function(){var t=this.visible();this.canvas._canvas.style.display=t?"block":"none"},e.prototype._setSmoothEnabled=function(){this.getContext()._context.imageSmoothingEnabled=this.imageSmoothingEnabled()},e.prototype.getWidth=function(){if(this.parent)return this.parent.width()},e.prototype.setWidth=function(){o.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},e.prototype.getHeight=function(){if(this.parent)return this.parent.height()},e.prototype.setHeight=function(){o.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')},e.prototype.batchDraw=function(){var t=this;return this._waitingForDraw||(this._waitingForDraw=!0,o.Util.requestAnimFrame((function(){t.draw(),t._waitingForDraw=!1}))),this},e.prototype.getIntersection=function(t,e){if(!this.isListening()||!this.isVisible())return null;for(var r=1,i=!1;;){for(var n=0;n<f;n++){var o=p[n],a=this._getIntersection({x:t.x+o.x*r,y:t.y+o.y*r}),s=a.shape;if(s&&e)return s.findAncestor(e,!0);if(s)return s;if(i=!!a.antialiased,!a.antialiased)break}if(!i)return null;r+=1}},e.prototype._getIntersection=function(t){var e=this.hitCanvas.pixelRatio,r=this.hitCanvas.context.getImageData(Math.round(t.x*e),Math.round(t.y*e),1,1).data,i=r[3];if(255===i){var n=o.Util._rgbToHex(r[0],r[1],r[2]),a=d.shapes["#"+n];return a?{shape:a}:{antialiased:!0}}return i>0?{antialiased:!0}:{}},e.prototype.drawScene=function(t,e){var r=this.getLayer(),i=t||r&&r.getCanvas();return this._fire("beforeDraw",{node:this}),this.clearBeforeDraw()&&i.getContext().clear(),a.Container.prototype.drawScene.call(this,i,e),this._fire("draw",{node:this}),this},e.prototype.drawHit=function(t,e){var r=this.getLayer(),i=t||r&&r.hitCanvas;return r&&r.clearBeforeDraw()&&r.getHitCanvas().getContext().clear(),a.Container.prototype.drawHit.call(this,i,e),this},e.prototype.enableHitGraph=function(){return this.hitGraphEnabled(!0),this},e.prototype.disableHitGraph=function(){return this.hitGraphEnabled(!1),this},e.prototype.setHitGraphEnabled=function(t){o.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening(t)},e.prototype.getHitGraphEnabled=function(t){return o.Util.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening()},e.prototype.toggleHitCanvas=function(){if(this.parent){var t=this.parent;this.hitCanvas._canvas.parentNode?t.content.removeChild(this.hitCanvas._canvas):t.content.appendChild(this.hitCanvas._canvas)}},e}(a.Container);e.Layer=g,g.prototype.nodeType="Layer",u._registerNode(g),h.Factory.addGetterSetter(g,"imageSmoothingEnabled",!0),h.Factory.addGetterSetter(g,"clearBeforeDraw",!0),h.Factory.addGetterSetter(g,"hitGraphEnabled",!0,l.getBooleanValidator()),o.Collection.mapMethods(g)},7939:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(8588),n=r(1455),o=r(4842),a=r(4417),s=r(210),h=r(3774);e.ids={},e.names={},e._removeId=function(t,r){t&&e.ids[t]===r&&delete e.ids[t]},e._addName=function(t,r){r&&(e.names[r]||(e.names[r]=[]),e.names[r].push(t))},e._removeName=function(t,r){if(t){var i=e.names[t];if(i){for(var n=0;n<i.length;n++)i[n]._id===r&&i.splice(n,1);0===i.length&&delete e.names[t]}}};var c="absoluteOpacity",l="allEventListeners",d="absoluteTransform",u="absoluteScale",p="canvas",f="listening",g="mouseenter",y="mouseleave",v="Shape",_=" ",m="stage",b="transform",x="visible",S=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(_),w=(["scaleXChange.konva","scaleYChange.konva"].join(_),new i.Collection),C=1,P=function(){function t(t){this._id=C++,this.eventListeners={},this.attrs={},this.index=0,this._allEventListeners=null,this.parent=null,this._cache=new Map,this._attachedDepsListeners=new Map,this._lastPos=null,this._batchingTransformChange=!1,this._needClearTransformCache=!1,this._filterUpToDate=!1,this._isUnderCache=!1,this.children=w,this._dragEventId=null,this._shouldFireChangeEvents=!1,this.setAttrs(t),this._shouldFireChangeEvents=!0}return t.prototype.hasChildren=function(){return!1},t.prototype.getChildren=function(){return w},t.prototype._clearCache=function(t){t!==b&&t!==d||!this._cache.get(t)?t?this._cache.delete(t):this._cache.clear():this._cache.get(t).dirty=!0},t.prototype._getCache=function(t,e){var r=this._cache.get(t);return(void 0===r||(t===b||t===d)&&!0===r.dirty)&&(r=e.call(this),this._cache.set(t,r)),r},t.prototype._calculate=function(t,e,r){var i=this;if(!this._attachedDepsListeners.get(t)){var n=e.map((function(t){return t+"Change.konva"})).join(_);this.on(n,(function(){i._clearCache(t)})),this._attachedDepsListeners.set(t,!0)}return this._getCache(t,r)},t.prototype._getCanvasCache=function(){return this._cache.get(p)},t.prototype._clearSelfAndDescendantCache=function(t,e){this._clearCache(t),e&&t===d&&this.fire("_clearTransformCache"),this.isCached()||this.children&&this.children.each((function(e){e._clearSelfAndDescendantCache(t,!0)}))},t.prototype.clearCache=function(){return this._cache.delete(p),this._clearSelfAndDescendantCache(),this},t.prototype.cache=function(t){var e=t||{},r={};void 0!==e.x&&void 0!==e.y&&void 0!==e.width&&void 0!==e.height||(r=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var n=Math.ceil(e.width||r.width),a=Math.ceil(e.height||r.height),s=e.pixelRatio,h=void 0===e.x?r.x:e.x,l=void 0===e.y?r.y:e.y,d=e.offset||0,f=e.drawBorder||!1;if(n&&a){n+=2*d,a+=2*d,h-=d,l-=d;var g=new o.SceneCanvas({pixelRatio:s,width:n,height:a}),y=new o.SceneCanvas({pixelRatio:s,width:0,height:0}),v=new o.HitCanvas({pixelRatio:1,width:n,height:a}),_=g.getContext(),m=v.getContext();return v.isCache=!0,g.isCache=!0,this._cache.delete("canvas"),this._filterUpToDate=!1,!1===e.imageSmoothingEnabled&&(g.getContext()._context.imageSmoothingEnabled=!1,y.getContext()._context.imageSmoothingEnabled=!1),_.save(),m.save(),_.translate(-h,-l),m.translate(-h,-l),this._isUnderCache=!0,this._clearSelfAndDescendantCache(c),this._clearSelfAndDescendantCache(u),this.drawScene(g,this),this.drawHit(v,this),this._isUnderCache=!1,_.restore(),m.restore(),f&&(_.save(),_.beginPath(),_.rect(0,0,n,a),_.closePath(),_.setAttr("strokeStyle","red"),_.setAttr("lineWidth",5),_.stroke(),_.restore()),this._cache.set(p,{scene:g,filter:y,hit:v,x:h,y:l}),this}i.Util.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")},t.prototype.isCached=function(){return this._cache.has("canvas")},t.prototype.getClientRect=function(t){throw new Error('abstract "getClientRect" method call')},t.prototype._transformedRect=function(t,e){var r,i,n,o,a=[{x:t.x,y:t.y},{x:t.x+t.width,y:t.y},{x:t.x+t.width,y:t.y+t.height},{x:t.x,y:t.y+t.height}],s=this.getAbsoluteTransform(e);return a.forEach((function(t){var e=s.point(t);void 0===r&&(r=n=e.x,i=o=e.y),r=Math.min(r,e.x),i=Math.min(i,e.y),n=Math.max(n,e.x),o=Math.max(o,e.y)})),{x:r,y:i,width:n-r,height:o-i}},t.prototype._drawCachedSceneCanvas=function(t){t.save(),t._applyOpacity(this),t._applyGlobalCompositeOperation(this);var e=this._getCanvasCache();t.translate(e.x,e.y);var r=this._getCachedSceneCanvas(),i=r.pixelRatio;t.drawImage(r._canvas,0,0,r.width/i,r.height/i),t.restore()},t.prototype._drawCachedHitCanvas=function(t){var e=this._getCanvasCache(),r=e.hit;t.save(),t.translate(e.x,e.y),t.drawImage(r._canvas,0,0),t.restore()},t.prototype._getCachedSceneCanvas=function(){var t,e,r,n,o=this.filters(),a=this._getCanvasCache(),s=a.scene,h=a.filter,c=h.getContext();if(o){if(!this._filterUpToDate){var l=s.pixelRatio;h.setSize(s.width/s.pixelRatio,s.height/s.pixelRatio);try{for(t=o.length,c.clear(),c.drawImage(s._canvas,0,0,s.getWidth()/l,s.getHeight()/l),e=c.getImageData(0,0,h.getWidth(),h.getHeight()),r=0;r<t;r++)"function"==typeof(n=o[r])?(n.call(this,e),c.putImageData(e,0,0)):i.Util.error("Filter should be type of function, but got "+typeof n+" instead. Please check correct filters")}catch(t){i.Util.error("Unable to apply filter. "+t.message+" This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.")}this._filterUpToDate=!0}return h}return s},t.prototype.on=function(t,e){if(this._cache&&this._cache.delete(l),3===arguments.length)return this._delegate.apply(this,arguments);var r,i,n,o,a=t.split(_),s=a.length;for(r=0;r<s;r++)n=(i=a[r].split("."))[0],o=i[1]||"",this.eventListeners[n]||(this.eventListeners[n]=[]),this.eventListeners[n].push({name:o,handler:e});return this},t.prototype.off=function(t,e){var r,i,n,o,a,s=(t||"").split(_),h=s.length;if(this._cache&&this._cache.delete(l),!t)for(i in this.eventListeners)this._off(i);for(r=0;r<h;r++)if(o=(n=s[r].split("."))[0],a=n[1],o)this.eventListeners[o]&&this._off(o,a,e);else for(i in this.eventListeners)this._off(i,a,e);return this},t.prototype.dispatchEvent=function(t){var e={target:this,type:t.type,evt:t};return this.fire(t.type,e),this},t.prototype.addEventListener=function(t,e){return this.on(t,(function(t){e.call(this,t.evt)})),this},t.prototype.removeEventListener=function(t){return this.off(t),this},t.prototype._delegate=function(t,e,r){var n=this;this.on(t,(function(t){for(var o=t.target.findAncestors(e,!0,n),a=0;a<o.length;a++)(t=i.Util.cloneObject(t)).currentTarget=o[a],r.call(o[a],t)}))},t.prototype.remove=function(){return this.isDragging()&&this.stopDrag(),s.DD._dragElements.delete(this._id),this._remove(),this},t.prototype._clearCaches=function(){this._clearSelfAndDescendantCache(d),this._clearSelfAndDescendantCache(c),this._clearSelfAndDescendantCache(u),this._clearSelfAndDescendantCache(m),this._clearSelfAndDescendantCache(x),this._clearSelfAndDescendantCache(f)},t.prototype._remove=function(){this._clearCaches();var t=this.getParent();t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),this.parent=null)},t.prototype.destroy=function(){e._removeId(this.id(),this);for(var t=(this.name()||"").split(/\s/g),r=0;r<t.length;r++){var i=t[r];e._removeName(i,this._id)}return this.remove(),this},t.prototype.getAttr=function(t){var e="get"+i.Util._capitalize(t);return i.Util._isFunction(this[e])?this[e]():this.attrs[t]},t.prototype.getAncestors=function(){for(var t=this.getParent(),e=new i.Collection;t;)e.push(t),t=t.getParent();return e},t.prototype.getAttrs=function(){return this.attrs||{}},t.prototype.setAttrs=function(t){var e=this;return this._batchTransformChanges((function(){var r,n;if(!t)return e;for(r in t)"children"!==r&&(n="set"+i.Util._capitalize(r),i.Util._isFunction(e[n])?e[n](t[r]):e._setAttr(r,t[r]))})),this},t.prototype.isListening=function(){return this._getCache(f,this._isListening)},t.prototype._isListening=function(t){if(!this.listening())return!1;var e=this.getParent();return!e||e===t||this===t||e._isListening(t)},t.prototype.isVisible=function(){return this._getCache(x,this._isVisible)},t.prototype._isVisible=function(t){if(!this.visible())return!1;var e=this.getParent();return!e||e===t||this===t||e._isVisible(t)},t.prototype.shouldDrawHit=function(t){if(t)return this._isVisible(t)&&this._isListening(t);var e=this.getLayer(),r=!1;s.DD._dragElements.forEach((function(t){"dragging"===t.dragStatus&&("Stage"===t.node.nodeType||t.node.getLayer()===e)&&(r=!0)}));var i=!a.Konva.hitOnDragEnabled&&r;return this.isListening()&&this.isVisible()&&!i},t.prototype.show=function(){return this.visible(!0),this},t.prototype.hide=function(){return this.visible(!1),this},t.prototype.getZIndex=function(){return this.index||0},t.prototype.getAbsoluteZIndex=function(){var t,e,r,i,n=this.getDepth(),o=this,a=0;return"Stage"!==o.nodeType&&function s(h){for(t=[],e=h.length,r=0;r<e;r++)i=h[r],a++,i.nodeType!==v&&(t=t.concat(i.getChildren().toArray())),i._id===o._id&&(r=e);t.length>0&&t[0].getDepth()<=n&&s(t)}(o.getStage().getChildren()),a},t.prototype.getDepth=function(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t},t.prototype._batchTransformChanges=function(t){this._batchingTransformChange=!0,t(),this._batchingTransformChange=!1,this._needClearTransformCache&&(this._clearCache(b),this._clearSelfAndDescendantCache(d,!0)),this._needClearTransformCache=!1},t.prototype.setPosition=function(t){var e=this;return this._batchTransformChanges((function(){e.x(t.x),e.y(t.y)})),this},t.prototype.getPosition=function(){return{x:this.x(),y:this.y()}},t.prototype.getAbsolutePosition=function(t){for(var e=!1,r=this.parent;r;){if(r.isCached()){e=!0;break}r=r.parent}e&&!t&&(t=!0);var n=this.getAbsoluteTransform(t).getMatrix(),o=new i.Transform,a=this.offset();return o.m=n.slice(),o.translate(a.x,a.y),o.getTranslation()},t.prototype.setAbsolutePosition=function(t){var e=this._clearTransform();this.attrs.x=e.x,this.attrs.y=e.y,delete e.x,delete e.y,this._clearCache(b);var r=this._getAbsoluteTransform().copy();return r.invert(),r.translate(t.x,t.y),t={x:this.attrs.x+r.getTranslation().x,y:this.attrs.y+r.getTranslation().y},this._setTransform(e),this.setPosition({x:t.x,y:t.y}),this._clearCache(b),this._clearSelfAndDescendantCache(d),this},t.prototype._setTransform=function(t){var e;for(e in t)this.attrs[e]=t[e]},t.prototype._clearTransform=function(){var t={x:this.x(),y:this.y(),rotation:this.rotation(),scaleX:this.scaleX(),scaleY:this.scaleY(),offsetX:this.offsetX(),offsetY:this.offsetY(),skewX:this.skewX(),skewY:this.skewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,t},t.prototype.move=function(t){var e=t.x,r=t.y,i=this.x(),n=this.y();return void 0!==e&&(i+=e),void 0!==r&&(n+=r),this.setPosition({x:i,y:n}),this},t.prototype._eachAncestorReverse=function(t,e){var r,i,n=[],o=this.getParent();if(!e||e._id!==this._id){for(n.unshift(this);o&&(!e||o._id!==e._id);)n.unshift(o),o=o.parent;for(r=n.length,i=0;i<r;i++)t(n[i])}},t.prototype.rotate=function(t){return this.rotation(this.rotation()+t),this},t.prototype.moveToTop=function(){if(!this.parent)return i.Util.warn("Node has no parent. moveToTop function is ignored."),!1;var t=this.index;return this.parent.children.splice(t,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0},t.prototype.moveUp=function(){if(!this.parent)return i.Util.warn("Node has no parent. moveUp function is ignored."),!1;var t=this.index;return t<this.parent.getChildren().length-1&&(this.parent.children.splice(t,1),this.parent.children.splice(t+1,0,this),this.parent._setChildrenIndices(),!0)},t.prototype.moveDown=function(){if(!this.parent)return i.Util.warn("Node has no parent. moveDown function is ignored."),!1;var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.splice(t-1,0,this),this.parent._setChildrenIndices(),!0)},t.prototype.moveToBottom=function(){if(!this.parent)return i.Util.warn("Node has no parent. moveToBottom function is ignored."),!1;var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)},t.prototype.setZIndex=function(t){if(!this.parent)return i.Util.warn("Node has no parent. zIndex parameter is ignored."),this;(t<0||t>=this.parent.children.length)&&i.Util.warn("Unexpected value "+t+" for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to "+(this.parent.children.length-1)+".");var e=this.index;return this.parent.children.splice(e,1),this.parent.children.splice(t,0,this),this.parent._setChildrenIndices(),this},t.prototype.getAbsoluteOpacity=function(){return this._getCache(c,this._getAbsoluteOpacity)},t.prototype._getAbsoluteOpacity=function(){var t=this.opacity(),e=this.getParent();return e&&!e._isUnderCache&&(t*=e.getAbsoluteOpacity()),t},t.prototype.moveTo=function(t){return this.getParent()!==t&&(this._remove(),t.add(this)),this},t.prototype.toObject=function(){var t,e,r,n,o={},a=this.getAttrs();for(t in o.attrs={},a)e=a[t],i.Util.isObject(e)&&!i.Util._isPlainObject(e)&&!i.Util._isArray(e)||(r="function"==typeof this[t]&&this[t],delete a[t],n=r?r.call(this):null,a[t]=e,n!==e&&(o.attrs[t]=e));return o.className=this.getClassName(),i.Util._prepareToStringify(o)},t.prototype.toJSON=function(){return JSON.stringify(this.toObject())},t.prototype.getParent=function(){return this.parent},t.prototype.findAncestors=function(t,e,r){var i=[];e&&this._isMatch(t)&&i.push(this);for(var n=this.parent;n;){if(n===r)return i;n._isMatch(t)&&i.push(n),n=n.parent}return i},t.prototype.isAncestorOf=function(t){return!1},t.prototype.findAncestor=function(t,e,r){return this.findAncestors(t,e,r)[0]},t.prototype._isMatch=function(t){if(!t)return!1;if("function"==typeof t)return t(this);var e,r,n=t.replace(/ /g,"").split(","),o=n.length;for(e=0;e<o;e++)if(r=n[e],i.Util.isValidSelector(r)||(i.Util.warn('Selector "'+r+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),i.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),i.Util.warn("Konva is awesome, right?")),"#"===r.charAt(0)){if(this.id()===r.slice(1))return!0}else if("."===r.charAt(0)){if(this.hasName(r.slice(1)))return!0}else if(this.className===r||this.nodeType===r)return!0;return!1},t.prototype.getLayer=function(){var t=this.getParent();return t?t.getLayer():null},t.prototype.getStage=function(){return this._getCache(m,this._getStage)},t.prototype._getStage=function(){var t=this.getParent();return t?t.getStage():void 0},t.prototype.fire=function(t,e,r){return void 0===e&&(e={}),e.target=e.target||this,r?this._fireAndBubble(t,e):this._fire(t,e),this},t.prototype.getAbsoluteTransform=function(t){return t?this._getAbsoluteTransform(t):this._getCache(d,this._getAbsoluteTransform)},t.prototype._getAbsoluteTransform=function(t){var e;if(t)return e=new i.Transform,this._eachAncestorReverse((function(t){var r=t.transformsEnabled();"all"===r?e.multiply(t.getTransform()):"position"===r&&e.translate(t.x()-t.offsetX(),t.y()-t.offsetY())}),t),e;e=this._cache.get(d)||new i.Transform,this.parent?this.parent.getAbsoluteTransform().copyInto(e):e.reset();var r=this.transformsEnabled();if("all"===r)e.multiply(this.getTransform());else if("position"===r){var n=this.attrs.x||0,o=this.attrs.y||0,a=this.attrs.offsetX||0,s=this.attrs.offsetY||0;e.translate(n-a,o-s)}return e.dirty=!1,e},t.prototype.getAbsoluteScale=function(t){for(var e=this;e;)e._isUnderCache&&(t=e),e=e.getParent();var r=this.getAbsoluteTransform(t).decompose();return{x:r.scaleX,y:r.scaleY}},t.prototype.getAbsoluteRotation=function(){return this.getAbsoluteTransform().decompose().rotation},t.prototype.getTransform=function(){return this._getCache(b,this._getTransform)},t.prototype._getTransform=function(){var t,e,r=this._cache.get(b)||new i.Transform;r.reset();var n=this.x(),o=this.y(),s=a.Konva.getAngle(this.rotation()),h=null!==(t=this.attrs.scaleX)&&void 0!==t?t:1,c=null!==(e=this.attrs.scaleY)&&void 0!==e?e:1,l=this.attrs.skewX||0,d=this.attrs.skewY||0,u=this.attrs.offsetX||0,p=this.attrs.offsetY||0;return 0===n&&0===o||r.translate(n,o),0!==s&&r.rotate(s),0===l&&0===d||r.skew(l,d),1===h&&1===c||r.scale(h,c),0===u&&0===p||r.translate(-1*u,-1*p),r.dirty=!1,r},t.prototype.clone=function(t){var e,r,n,o,a,s=i.Util.cloneObject(this.attrs);for(e in t)s[e]=t[e];var h=new this.constructor(s);for(e in this.eventListeners)for(n=(r=this.eventListeners[e]).length,o=0;o<n;o++)(a=r[o]).name.indexOf("konva")<0&&(h.eventListeners[e]||(h.eventListeners[e]=[]),h.eventListeners[e].push(a));return h},t.prototype._toKonvaCanvas=function(t){t=t||{};var e=this.getClientRect(),r=this.getStage(),i=void 0!==t.x?t.x:e.x,n=void 0!==t.y?t.y:e.y,a=t.pixelRatio||1,s=new o.SceneCanvas({width:t.width||e.width||(r?r.width():0),height:t.height||e.height||(r?r.height():0),pixelRatio:a}),h=s.getContext();return h.save(),(i||n)&&h.translate(-1*i,-1*n),this.drawScene(s),h.restore(),s},t.prototype.toCanvas=function(t){return this._toKonvaCanvas(t)._canvas},t.prototype.toDataURL=function(t){var e=(t=t||{}).mimeType||null,r=t.quality||null,i=this._toKonvaCanvas(t).toDataURL(e,r);return t.callback&&t.callback(i),i},t.prototype.toImage=function(t){if(!t||!t.callback)throw"callback required for toImage method config argument";var e=t.callback;delete t.callback,i.Util._urlToImage(this.toDataURL(t),(function(t){e(t)}))},t.prototype.setSize=function(t){return this.width(t.width),this.height(t.height),this},t.prototype.getSize=function(){return{width:this.width(),height:this.height()}},t.prototype.getClassName=function(){return this.className||this.nodeType},t.prototype.getType=function(){return this.nodeType},t.prototype.getDragDistance=function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():a.Konva.dragDistance},t.prototype._off=function(t,e,r){var i,n,o,a=this.eventListeners[t];for(i=0;i<a.length;i++)if(n=a[i].name,o=a[i].handler,!("konva"===n&&"konva"!==e||e&&n!==e||r&&r!==o)){if(a.splice(i,1),0===a.length){delete this.eventListeners[t];break}i--}},t.prototype._fireChangeEvent=function(t,e,r){this._fire(t+"Change",{oldVal:e,newVal:r})},t.prototype.setId=function(t){var r=this.id();return e._removeId(r,this),function(t,r){r&&(e.ids[r]=t)}(this,t),this._setAttr("id",t),this},t.prototype.setName=function(t){var r,i,n=(this.name()||"").split(/\s/g),o=(t||"").split(/\s/g);for(i=0;i<n.length;i++)r=n[i],-1===o.indexOf(r)&&r&&e._removeName(r,this._id);for(i=0;i<o.length;i++)r=o[i],-1===n.indexOf(r)&&r&&e._addName(this,r);return this._setAttr("name",t),this},t.prototype.addName=function(t){if(!this.hasName(t)){var e=this.name(),r=e?e+" "+t:t;this.setName(r)}return this},t.prototype.hasName=function(t){if(!t)return!1;var e=this.name();return!!e&&-1!==(e||"").split(/\s/g).indexOf(t)},t.prototype.removeName=function(t){var e=(this.name()||"").split(/\s/g),r=e.indexOf(t);return-1!==r&&(e.splice(r,1),this.setName(e.join(" "))),this},t.prototype.setAttr=function(t,e){var r=this["set"+i.Util._capitalize(t)];return i.Util._isFunction(r)?r.call(this,e):this._setAttr(t,e),this},t.prototype._setAttr=function(t,e,r){void 0===r&&(r=!1);var n=this.attrs[t];(n!==e||i.Util.isObject(e))&&(null==e?delete this.attrs[t]:this.attrs[t]=e,this._shouldFireChangeEvents&&this._fireChangeEvent(t,n,e))},t.prototype._setComponentAttr=function(t,e,r){var i;void 0!==r&&((i=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=r,this._fireChangeEvent(t,i,r))},t.prototype._fireAndBubble=function(t,e,r){if(e&&this.nodeType===v&&(e.target=this),t!==g&&t!==y||!(r&&(this===r||this.isAncestorOf&&this.isAncestorOf(r))||"Stage"===this.nodeType&&!r)){this._fire(t,e);var i=(t===g||t===y)&&r&&r.isAncestorOf&&r.isAncestorOf(this)&&!r.isAncestorOf(this.parent);(e&&!e.cancelBubble||!e)&&this.parent&&this.parent.isListening()&&!i&&(r&&r.parent?this._fireAndBubble.call(this.parent,t,e,r):this._fireAndBubble.call(this.parent,t,e))}},t.prototype._getProtoListeners=function(t){var e=this._cache.get(l);if(!e){e={};for(var r=Object.getPrototypeOf(this);r;)if(r.eventListeners){for(var i in r.eventListeners){var n=r.eventListeners[i],o=e[i]||[];e[i]=n.concat(o)}r=Object.getPrototypeOf(r)}else r=Object.getPrototypeOf(r);this._cache.set(l,e)}return e[t]},t.prototype._fire=function(t,e){(e=e||{}).currentTarget=this,e.type=t;var r=this._getProtoListeners(t);if(r)for(var i=0;i<r.length;i++)r[i].handler.call(this,e);var n=this.eventListeners[t];if(n)for(i=0;i<n.length;i++)n[i].handler.call(this,e)},t.prototype.draw=function(){return this.drawScene(),this.drawHit(),this},t.prototype._createDragElement=function(t){var e=t?t.pointerId:void 0,r=this.getStage(),i=this.getAbsolutePosition(),n=r._getPointerById(e)||r._changedPointerPositions[0]||i;s.DD._dragElements.set(this._id,{node:this,startPointerPos:n,offset:{x:n.x-i.x,y:n.y-i.y},dragStatus:"ready",pointerId:e})},t.prototype.startDrag=function(t,e){void 0===e&&(e=!0),s.DD._dragElements.has(this._id)||this._createDragElement(t),s.DD._dragElements.get(this._id).dragStatus="dragging",this.fire("dragstart",{type:"dragstart",target:this,evt:t&&t.evt},e)},t.prototype._setDragPosition=function(t,e){var r=this.getStage()._getPointerById(e.pointerId);if(r){var n={x:r.x-e.offset.x,y:r.y-e.offset.y},o=this.dragBoundFunc();if(void 0!==o){var a=o.call(this,n,t);a?n=a:i.Util.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.")}this._lastPos&&this._lastPos.x===n.x&&this._lastPos.y===n.y||(this.setAbsolutePosition(n),this.getLayer()?this.getLayer().batchDraw():this.getStage()&&this.getStage().batchDraw()),this._lastPos=n}},t.prototype.stopDrag=function(t){var e=s.DD._dragElements.get(this._id);e&&(e.dragStatus="stopped"),s.DD._endDragBefore(t),s.DD._endDragAfter(t)},t.prototype.setDraggable=function(t){this._setAttr("draggable",t),this._dragChange()},t.prototype.isDragging=function(){var t=s.DD._dragElements.get(this._id);return!!t&&"dragging"===t.dragStatus},t.prototype._listenDrag=function(){this._dragCleanup(),this.on("mousedown.konva touchstart.konva",(function(t){var e=this;if((void 0===t.evt.button||a.Konva.dragButtons.indexOf(t.evt.button)>=0)&&!this.isDragging()){var r=!1;s.DD._dragElements.forEach((function(t){e.isAncestorOf(t.node)&&(r=!0)})),r||this._createDragElement(t)}}))},t.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{if(this._dragCleanup(),!this.getStage())return;var t=s.DD._dragElements.get(this._id),e=t&&"dragging"===t.dragStatus,r=t&&"ready"===t.dragStatus;e?this.stopDrag():r&&s.DD._dragElements.delete(this._id)}},t.prototype._dragCleanup=function(){this.off("mousedown.konva"),this.off("touchstart.konva")},t.create=function(t,e){return i.Util._isString(t)&&(t=JSON.parse(t)),this._createNode(t,e)},t._createNode=function(e,r){var n,o,s,h=t.prototype.getClassName.call(e),c=e.children;if(r&&(e.attrs.container=r),a._NODES_REGISTRY[h]||(i.Util.warn('Can not find a node with class name "'+h+'". Fallback to "Shape".'),h="Shape"),n=new(0,a._NODES_REGISTRY[h])(e.attrs),c)for(o=c.length,s=0;s<o;s++)n.add(t._createNode(c[s]));return n},t}();e.Node=P,P.prototype.nodeType="Node",P.prototype._attrsAffectingSize=[],P.prototype.eventListeners={},P.prototype.on.call(P.prototype,S,(function(){this._batchingTransformChange?this._needClearTransformCache=!0:(this._clearCache(b),this._clearSelfAndDescendantCache(d))})),P.prototype.on.call(P.prototype,"visibleChange.konva",(function(){this._clearSelfAndDescendantCache(x)})),P.prototype.on.call(P.prototype,"listeningChange.konva",(function(){this._clearSelfAndDescendantCache(f)})),P.prototype.on.call(P.prototype,"opacityChange.konva",(function(){this._clearSelfAndDescendantCache(c)}));var T=n.Factory.addGetterSetter;T(P,"zIndex"),T(P,"absolutePosition"),T(P,"position"),T(P,"x",0,h.getNumberValidator()),T(P,"y",0,h.getNumberValidator()),T(P,"globalCompositeOperation","source-over",h.getStringValidator()),T(P,"opacity",1,h.getNumberValidator()),T(P,"name","",h.getStringValidator()),T(P,"id","",h.getStringValidator()),T(P,"rotation",0,h.getNumberValidator()),n.Factory.addComponentsGetterSetter(P,"scale",["x","y"]),T(P,"scaleX",1,h.getNumberValidator()),T(P,"scaleY",1,h.getNumberValidator()),n.Factory.addComponentsGetterSetter(P,"skew",["x","y"]),T(P,"skewX",0,h.getNumberValidator()),T(P,"skewY",0,h.getNumberValidator()),n.Factory.addComponentsGetterSetter(P,"offset",["x","y"]),T(P,"offsetX",0,h.getNumberValidator()),T(P,"offsetY",0,h.getNumberValidator()),T(P,"dragDistance",null,h.getNumberValidator()),T(P,"width",0,h.getNumberValidator()),T(P,"height",0,h.getNumberValidator()),T(P,"listening",!0,h.getBooleanValidator()),T(P,"preventDefault",!0,h.getBooleanValidator()),T(P,"filters",null,(function(t){return this._filterUpToDate=!1,t})),T(P,"visible",!0,h.getBooleanValidator()),T(P,"transformsEnabled","all",h.getStringValidator()),T(P,"size"),T(P,"dragBoundFunc"),T(P,"draggable",!1,h.getBooleanValidator()),n.Factory.backCompat(P,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),i.Collection.mapMethods(P)},8479:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(4417),n=new Map,o=void 0!==i.Konva._global.PointerEvent;function a(t){return{evt:t,pointerId:t.pointerId}}function s(t,e){var r=n.get(t);if(r){var i=r.getStage();i&&i.content,n.delete(t),o&&r._fire("lostpointercapture",a(new PointerEvent("lostpointercapture")))}}e.getCapturedShape=function(t){return n.get(t)},e.createEvent=a,e.hasPointerCapture=function(t,e){return n.get(t)===e},e.setPointerCapture=function(t,e){s(t),e.getStage()&&(n.set(t,e),o&&e._fire("gotpointercapture",a(new PointerEvent("gotpointercapture"))))},e.releaseCapture=s},7955:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o,a=r(8588),s=r(1455),h=r(7939),c=r(3774),l=r(4417),d=r(8479),u="hasShadow",p="shadowRGBA",f="patternImage",g="linearGradient",y="radialGradient";function v(){return o||(o=a.Util.createCanvasElement().getContext("2d"))}e.shapes={};var _=function(t){function r(r){for(var i,n=t.call(this,r)||this;!(i=a.Util.getRandomColor())||i in e.shapes;);return n.colorKey=i,e.shapes[i]=n,n}return n(r,t),r.prototype.getContext=function(){return this.getLayer().getContext()},r.prototype.getCanvas=function(){return this.getLayer().getCanvas()},r.prototype.getSceneFunc=function(){return this.attrs.sceneFunc||this._sceneFunc},r.prototype.getHitFunc=function(){return this.attrs.hitFunc||this._hitFunc},r.prototype.hasShadow=function(){return this._getCache(u,this._hasShadow)},r.prototype._hasShadow=function(){return this.shadowEnabled()&&0!==this.shadowOpacity()&&!!(this.shadowColor()||this.shadowBlur()||this.shadowOffsetX()||this.shadowOffsetY())},r.prototype._getFillPattern=function(){return this._getCache(f,this.__getFillPattern)},r.prototype.__getFillPattern=function(){if(this.fillPatternImage()){var t=v().createPattern(this.fillPatternImage(),this.fillPatternRepeat()||"repeat");return t&&t.setTransform&&t.setTransform({a:this.fillPatternScaleX(),b:0,c:0,d:this.fillPatternScaleY(),e:0,f:0}),t}},r.prototype._getLinearGradient=function(){return this._getCache(g,this.__getLinearGradient)},r.prototype.__getLinearGradient=function(){var t=this.fillLinearGradientColorStops();if(t){for(var e=v(),r=this.fillLinearGradientStartPoint(),i=this.fillLinearGradientEndPoint(),n=e.createLinearGradient(r.x,r.y,i.x,i.y),o=0;o<t.length;o+=2)n.addColorStop(t[o],t[o+1]);return n}},r.prototype._getRadialGradient=function(){return this._getCache(y,this.__getRadialGradient)},r.prototype.__getRadialGradient=function(){var t=this.fillRadialGradientColorStops();if(t){for(var e=v(),r=this.fillRadialGradientStartPoint(),i=this.fillRadialGradientEndPoint(),n=e.createRadialGradient(r.x,r.y,this.fillRadialGradientStartRadius(),i.x,i.y,this.fillRadialGradientEndRadius()),o=0;o<t.length;o+=2)n.addColorStop(t[o],t[o+1]);return n}},r.prototype.getShadowRGBA=function(){return this._getCache(p,this._getShadowRGBA)},r.prototype._getShadowRGBA=function(){if(this.hasShadow()){var t=a.Util.colorToRGBA(this.shadowColor());return"rgba("+t.r+","+t.g+","+t.b+","+t.a*(this.shadowOpacity()||1)+")"}},r.prototype.hasFill=function(){var t=this;return this._calculate("hasFill",["fillEnabled","fill","fillPatternImage","fillLinearGradientColorStops","fillRadialGradientColorStops"],(function(){return t.fillEnabled()&&!!(t.fill()||t.fillPatternImage()||t.fillLinearGradientColorStops()||t.fillRadialGradientColorStops())}))},r.prototype.hasStroke=function(){var t=this;return this._calculate("hasStroke",["strokeEnabled","strokeWidth","stroke","strokeLinearGradientColorStops"],(function(){return t.strokeEnabled()&&t.strokeWidth()&&!(!t.stroke()&&!t.strokeLinearGradientColorStops())}))},r.prototype.hasHitStroke=function(){var t=this.hitStrokeWidth();return"auto"===t?this.hasStroke():this.strokeEnabled()&&!!t},r.prototype.intersects=function(t){var e=this.getStage().bufferHitCanvas;return e.getContext().clear(),this.drawHit(e),e.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0},r.prototype.destroy=function(){return h.Node.prototype.destroy.call(this),delete e.shapes[this.colorKey],delete this.colorKey,this},r.prototype._useBufferCanvas=function(t){var e;if(!this.getStage())return!1;if(null!==(e=this.attrs.perfectDrawEnabled)&&void 0!==e&&!e)return!1;var r=t||this.hasFill(),i=this.hasStroke(),n=1!==this.getAbsoluteOpacity();if(r&&i&&n)return!0;var o=this.hasShadow(),a=this.shadowForStrokeEnabled();return!!(r&&i&&o&&a)},r.prototype.setStrokeHitEnabled=function(t){a.Util.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."),t?this.hitStrokeWidth("auto"):this.hitStrokeWidth(0)},r.prototype.getStrokeHitEnabled=function(){return 0!==this.hitStrokeWidth()},r.prototype.getSelfRect=function(){var t=this.size();return{x:this._centroid?-t.width/2:0,y:this._centroid?-t.height/2:0,width:t.width,height:t.height}},r.prototype.getClientRect=function(t){void 0===t&&(t={});var e=t.skipTransform,r=t.relativeTo,i=this.getSelfRect(),n=!t.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,o=i.width+n,a=i.height+n,s=!t.skipShadow&&this.hasShadow(),h=s?this.shadowOffsetX():0,c=s?this.shadowOffsetY():0,l=o+Math.abs(h),d=a+Math.abs(c),u=s&&this.shadowBlur()||0,p=l+2*u,f=d+2*u,g=0;Math.round(n/2)!==n/2&&(g=1);var y={width:p+g,height:f+g,x:-Math.round(n/2+u)+Math.min(h,0)+i.x,y:-Math.round(n/2+u)+Math.min(c,0)+i.y};return e?y:this._transformedRect(y,r)},r.prototype.drawScene=function(t,e){var r,i,n=this.getLayer(),o=t||n.getCanvas(),a=o.getContext(),s=this._getCanvasCache(),h=this.getSceneFunc(),c=this.hasShadow(),l=o.isCache,d=o.isCache,u=e===this;if(!this.isVisible()&&!l)return this;if(s){a.save();var p=this.getAbsoluteTransform(e).getMatrix();return a.transform(p[0],p[1],p[2],p[3],p[4],p[5]),this._drawCachedSceneCanvas(a),a.restore(),this}if(!h)return this;if(a.save(),this._useBufferCanvas()&&!d){(i=(r=this.getStage().bufferCanvas).getContext()).clear(),i.save(),i._applyLineJoin(this);var f=this.getAbsoluteTransform(e).getMatrix();i.transform(f[0],f[1],f[2],f[3],f[4],f[5]),h.call(this,i,this),i.restore();var g=r.pixelRatio;c&&a._applyShadow(this),a._applyOpacity(this),a._applyGlobalCompositeOperation(this),a.drawImage(r._canvas,0,0,r.width/g,r.height/g)}else a._applyLineJoin(this),u||(f=this.getAbsoluteTransform(e).getMatrix(),a.transform(f[0],f[1],f[2],f[3],f[4],f[5]),a._applyOpacity(this),a._applyGlobalCompositeOperation(this)),c&&a._applyShadow(this),h.call(this,a,this);return a.restore(),this},r.prototype.drawHit=function(t,e){if(!this.shouldDrawHit(e))return this;var r=this.getLayer(),i=t||r.hitCanvas,n=i&&i.getContext(),o=this.hitFunc()||this.sceneFunc(),s=this._getCanvasCache(),h=s&&s.hit;if(this.colorKey||(console.log(this),a.Util.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. See the shape in logs above. If you want to reuse shape you should call remove() instead of destroy()")),h){n.save();var c=this.getAbsoluteTransform(e).getMatrix();return n.transform(c[0],c[1],c[2],c[3],c[4],c[5]),this._drawCachedHitCanvas(n),n.restore(),this}if(!o)return this;if(n.save(),n._applyLineJoin(this),this!==e){var l=this.getAbsoluteTransform(e).getMatrix();n.transform(l[0],l[1],l[2],l[3],l[4],l[5])}return o.call(this,n,this),n.restore(),this},r.prototype.drawHitFromCache=function(t){void 0===t&&(t=0);var e,r,i,n,o,s=this._getCanvasCache(),h=this._getCachedSceneCanvas(),c=s.hit,l=c.getContext(),d=c.getWidth(),u=c.getHeight();l.clear(),l.drawImage(h._canvas,0,0,d,u);try{for(i=(r=(e=l.getImageData(0,0,d,u)).data).length,n=a.Util._hexToRgb(this.colorKey),o=0;o<i;o+=4)r[o+3]>t?(r[o]=n.r,r[o+1]=n.g,r[o+2]=n.b,r[o+3]=255):r[o+3]=0;l.putImageData(e,0,0)}catch(t){a.Util.error("Unable to draw hit graph from cached scene canvas. "+t.message)}return this},r.prototype.hasPointerCapture=function(t){return d.hasPointerCapture(t,this)},r.prototype.setPointerCapture=function(t){d.setPointerCapture(t,this)},r.prototype.releaseCapture=function(t){d.releaseCapture(t,this)},r}(h.Node);e.Shape=_,_.prototype._fillFunc=function(t){t.fill()},_.prototype._strokeFunc=function(t){t.stroke()},_.prototype._fillFuncHit=function(t){t.fill()},_.prototype._strokeFuncHit=function(t){t.stroke()},_.prototype._centroid=!1,_.prototype.nodeType="Shape",l._registerNode(_),_.prototype.eventListeners={},_.prototype.on.call(_.prototype,"shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(u)})),_.prototype.on.call(_.prototype,"shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(p)})),_.prototype.on.call(_.prototype,"fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva",(function(){this._clearCache(f)})),_.prototype.on.call(_.prototype,"fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva",(function(){this._clearCache(g)})),_.prototype.on.call(_.prototype,"fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva",(function(){this._clearCache(y)})),s.Factory.addGetterSetter(_,"stroke",void 0,c.getStringOrGradientValidator()),s.Factory.addGetterSetter(_,"strokeWidth",2,c.getNumberValidator()),s.Factory.addGetterSetter(_,"fillAfterStrokeEnabled",!1),s.Factory.addGetterSetter(_,"hitStrokeWidth","auto",c.getNumberOrAutoValidator()),s.Factory.addGetterSetter(_,"strokeHitEnabled",!0,c.getBooleanValidator()),s.Factory.addGetterSetter(_,"perfectDrawEnabled",!0,c.getBooleanValidator()),s.Factory.addGetterSetter(_,"shadowForStrokeEnabled",!0,c.getBooleanValidator()),s.Factory.addGetterSetter(_,"lineJoin"),s.Factory.addGetterSetter(_,"lineCap"),s.Factory.addGetterSetter(_,"sceneFunc"),s.Factory.addGetterSetter(_,"hitFunc"),s.Factory.addGetterSetter(_,"dash"),s.Factory.addGetterSetter(_,"dashOffset",0,c.getNumberValidator()),s.Factory.addGetterSetter(_,"shadowColor",void 0,c.getStringValidator()),s.Factory.addGetterSetter(_,"shadowBlur",0,c.getNumberValidator()),s.Factory.addGetterSetter(_,"shadowOpacity",1,c.getNumberValidator()),s.Factory.addComponentsGetterSetter(_,"shadowOffset",["x","y"]),s.Factory.addGetterSetter(_,"shadowOffsetX",0,c.getNumberValidator()),s.Factory.addGetterSetter(_,"shadowOffsetY",0,c.getNumberValidator()),s.Factory.addGetterSetter(_,"fillPatternImage"),s.Factory.addGetterSetter(_,"fill",void 0,c.getStringOrGradientValidator()),s.Factory.addGetterSetter(_,"fillPatternX",0,c.getNumberValidator()),s.Factory.addGetterSetter(_,"fillPatternY",0,c.getNumberValidator()),s.Factory.addGetterSetter(_,"fillLinearGradientColorStops"),s.Factory.addGetterSetter(_,"strokeLinearGradientColorStops"),s.Factory.addGetterSetter(_,"fillRadialGradientStartRadius",0),s.Factory.addGetterSetter(_,"fillRadialGradientEndRadius",0),s.Factory.addGetterSetter(_,"fillRadialGradientColorStops"),s.Factory.addGetterSetter(_,"fillPatternRepeat","repeat"),s.Factory.addGetterSetter(_,"fillEnabled",!0),s.Factory.addGetterSetter(_,"strokeEnabled",!0),s.Factory.addGetterSetter(_,"shadowEnabled",!0),s.Factory.addGetterSetter(_,"dashEnabled",!0),s.Factory.addGetterSetter(_,"strokeScaleEnabled",!0),s.Factory.addGetterSetter(_,"fillPriority","color"),s.Factory.addComponentsGetterSetter(_,"fillPatternOffset",["x","y"]),s.Factory.addGetterSetter(_,"fillPatternOffsetX",0,c.getNumberValidator()),s.Factory.addGetterSetter(_,"fillPatternOffsetY",0,c.getNumberValidator()),s.Factory.addComponentsGetterSetter(_,"fillPatternScale",["x","y"]),s.Factory.addGetterSetter(_,"fillPatternScaleX",1,c.getNumberValidator()),s.Factory.addGetterSetter(_,"fillPatternScaleY",1,c.getNumberValidator()),s.Factory.addComponentsGetterSetter(_,"fillLinearGradientStartPoint",["x","y"]),s.Factory.addComponentsGetterSetter(_,"strokeLinearGradientStartPoint",["x","y"]),s.Factory.addGetterSetter(_,"fillLinearGradientStartPointX",0),s.Factory.addGetterSetter(_,"strokeLinearGradientStartPointX",0),s.Factory.addGetterSetter(_,"fillLinearGradientStartPointY",0),s.Factory.addGetterSetter(_,"strokeLinearGradientStartPointY",0),s.Factory.addComponentsGetterSetter(_,"fillLinearGradientEndPoint",["x","y"]),s.Factory.addComponentsGetterSetter(_,"strokeLinearGradientEndPoint",["x","y"]),s.Factory.addGetterSetter(_,"fillLinearGradientEndPointX",0),s.Factory.addGetterSetter(_,"strokeLinearGradientEndPointX",0),s.Factory.addGetterSetter(_,"fillLinearGradientEndPointY",0),s.Factory.addGetterSetter(_,"strokeLinearGradientEndPointY",0),s.Factory.addComponentsGetterSetter(_,"fillRadialGradientStartPoint",["x","y"]),s.Factory.addGetterSetter(_,"fillRadialGradientStartPointX",0),s.Factory.addGetterSetter(_,"fillRadialGradientStartPointY",0),s.Factory.addComponentsGetterSetter(_,"fillRadialGradientEndPoint",["x","y"]),s.Factory.addGetterSetter(_,"fillRadialGradientEndPointX",0),s.Factory.addGetterSetter(_,"fillRadialGradientEndPointY",0),s.Factory.addGetterSetter(_,"fillPatternRotation",0),s.Factory.backCompat(_,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),a.Collection.mapMethods(_)},8342:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(8783),h=r(4417),c=r(4842),l=r(210),d=r(4417),u=r(8479),p="mouseout",f="mouseleave",g="mouseover",y="mouseenter",v="mousemove",_="mousedown",m="mouseup",b="pointermove",x="pointerdown",S="pointerup",w="contextmenu",C="click",P="dblclick",T="touchstart",k="touchend",A="dbltap",O="touchmove",M="wheel",F=[y,_,v,m,p,T,O,k,g,M,w,x,b,S,"pointercancel","lostpointercapture"],E=F.length;function N(t,e){t.content.addEventListener(e,(function(r){t["_"+e](r)}),!1)}function G(t){return void 0===t&&(t={}),(t.clipFunc||t.clipWidth||t.clipHeight)&&o.Util.warn("Stage does not support clipping. Please use clip for Layers or Groups."),t}e.stages=[];var D=function(t){function r(r){var i=t.call(this,G(r))||this;return i._pointerPositions=[],i._changedPointerPositions=[],i._buildDOM(),i._bindContentEvents(),e.stages.push(i),i.on("widthChange.konva heightChange.konva",i._resizeDOM),i.on("visibleChange.konva",i._checkVisibility),i.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva",(function(){G(i.attrs)})),i._checkVisibility(),i}return n(r,t),r.prototype._validateAdd=function(t){var e="Layer"===t.getType(),r="FastLayer"===t.getType();e||r||o.Util.throw("You may only add layers to the stage.")},r.prototype._checkVisibility=function(){if(this.content){var t=this.visible()?"":"none";this.content.style.display=t}},r.prototype.setContainer=function(t){if("string"==typeof t){if("."===t.charAt(0)){var e=t.slice(1);t=document.getElementsByClassName(e)[0]}else{var r;r="#"!==t.charAt(0)?t:t.slice(1),t=document.getElementById(r)}if(!t)throw"Can not find container in document with id "+r}return this._setAttr("container",t),this.content&&(this.content.parentElement&&this.content.parentElement.removeChild(this.content),t.appendChild(this.content)),this},r.prototype.shouldDrawHit=function(){return!0},r.prototype.clear=function(){var t,e=this.children,r=e.length;for(t=0;t<r;t++)e[t].clear();return this},r.prototype.clone=function(t){return t||(t={}),t.container=document.createElement("div"),s.Container.prototype.clone.call(this,t)},r.prototype.destroy=function(){t.prototype.destroy.call(this);var r=this.content;r&&o.Util._isInDocument(r)&&this.container().removeChild(r);var i=e.stages.indexOf(this);return i>-1&&e.stages.splice(i,1),this},r.prototype.getPointerPosition=function(){var t=this._pointerPositions[0]||this._changedPointerPositions[0];return t?{x:t.x,y:t.y}:(o.Util.warn("Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);"),null)},r.prototype._getPointerById=function(t){return this._pointerPositions.find((function(e){return e.id===t}))},r.prototype.getPointersPositions=function(){return this._pointerPositions},r.prototype.getStage=function(){return this},r.prototype.getContent=function(){return this.content},r.prototype._toKonvaCanvas=function(t){(t=t||{}).x=t.x||0,t.y=t.y||0,t.width=t.width||this.width(),t.height=t.height||this.height();var e=new c.SceneCanvas({width:t.width,height:t.height,pixelRatio:t.pixelRatio||1}),r=e.getContext()._context,i=this.children;return(t.x||t.y)&&r.translate(-1*t.x,-1*t.y),i.each((function(e){if(e.isVisible()){var i=e._toKonvaCanvas(t);r.drawImage(i._canvas,t.x,t.y,i.getWidth()/i.getPixelRatio(),i.getHeight()/i.getPixelRatio())}})),e},r.prototype.getIntersection=function(t,e){if(!t)return null;var r,i,n=this.children;for(r=n.length-1;r>=0;r--)if(i=n[r].getIntersection(t,e))return i;return null},r.prototype._resizeDOM=function(){var t=this.width(),e=this.height();this.content&&(this.content.style.width=t+"px",this.content.style.height=e+"px"),this.bufferCanvas.setSize(t,e),this.bufferHitCanvas.setSize(t,e),this.children.each((function(r){r.setSize({width:t,height:e}),r.draw()}))},r.prototype.add=function(e){if(arguments.length>1){for(var r=0;r<arguments.length;r++)this.add(arguments[r]);return this}t.prototype.add.call(this,e);var i=this.children.length;return i>5&&o.Util.warn("The stage has "+i+" layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."),e.setSize({width:this.width(),height:this.height()}),e.draw(),h.Konva.isBrowser&&this.content.appendChild(e.canvas._canvas),this},r.prototype.getParent=function(){return null},r.prototype.getLayer=function(){return null},r.prototype.hasPointerCapture=function(t){return u.hasPointerCapture(t,this)},r.prototype.setPointerCapture=function(t){u.setPointerCapture(t,this)},r.prototype.releaseCapture=function(t){u.releaseCapture(t,this)},r.prototype.getLayers=function(){return this.getChildren()},r.prototype._bindContentEvents=function(){if(h.Konva.isBrowser)for(var t=0;t<E;t++)N(this,F[t])},r.prototype._mouseenter=function(t){this.setPointersPositions(t),this._fire(y,{evt:t,target:this,currentTarget:this})},r.prototype._mouseover=function(t){this.setPointersPositions(t),this._fire("contentMouseover",{evt:t}),this._fire(g,{evt:t,target:this,currentTarget:this})},r.prototype._mouseout=function(t){var e;this.setPointersPositions(t);var r=(null===(e=this.targetShape)||void 0===e?void 0:e.getStage())?this.targetShape:null,i=!l.DD.isDragging||h.Konva.hitOnDragEnabled;r&&i?(r._fireAndBubble(p,{evt:t}),r._fireAndBubble(f,{evt:t}),this._fire(f,{evt:t,target:this,currentTarget:this}),this.targetShape=null):i&&(this._fire(f,{evt:t,target:this,currentTarget:this}),this._fire(p,{evt:t,target:this,currentTarget:this})),this.pointerPos=void 0,this._pointerPositions=[],this._fire("contentMouseout",{evt:t})},r.prototype._mousemove=function(t){var e;if(h.Konva.UA.ieMobile)return this._touchmove(t);this.setPointersPositions(t);var r,i=o.Util._getFirstPointerId(t),n=(null===(e=this.targetShape)||void 0===e?void 0:e.getStage())?this.targetShape:null,a=!l.DD.isDragging||h.Konva.hitOnDragEnabled;a&&((r=this.getIntersection(this.getPointerPosition()))&&r.isListening()?a&&n!==r?(n&&(n._fireAndBubble(p,{evt:t,pointerId:i},r),n._fireAndBubble(f,{evt:t,pointerId:i},r)),r._fireAndBubble(g,{evt:t,pointerId:i},n),r._fireAndBubble(y,{evt:t,pointerId:i},n),r._fireAndBubble(v,{evt:t,pointerId:i}),this.targetShape=r):r._fireAndBubble(v,{evt:t,pointerId:i}):(n&&a&&(n._fireAndBubble(p,{evt:t,pointerId:i}),n._fireAndBubble(f,{evt:t,pointerId:i}),this._fire(g,{evt:t,target:this,currentTarget:this,pointerId:i}),this.targetShape=null),this._fire(v,{evt:t,target:this,currentTarget:this,pointerId:i})),this._fire("contentMousemove",{evt:t})),t.cancelable&&t.preventDefault()},r.prototype._mousedown=function(t){if(h.Konva.UA.ieMobile)return this._touchstart(t);this.setPointersPositions(t);var e=o.Util._getFirstPointerId(t),r=this.getIntersection(this.getPointerPosition());l.DD.justDragged=!1,h.Konva.listenClickTap=!0,r&&r.isListening()?(this.clickStartShape=r,r._fireAndBubble(_,{evt:t,pointerId:e})):this._fire(_,{evt:t,target:this,currentTarget:this,pointerId:e}),this._fire("contentMousedown",{evt:t})},r.prototype._mouseup=function(t){if(h.Konva.UA.ieMobile)return this._touchend(t);this.setPointersPositions(t);var e=o.Util._getFirstPointerId(t),r=this.getIntersection(this.getPointerPosition()),i=this.clickStartShape,n=this.clickEndShape,a=!1;h.Konva.inDblClickWindow?(a=!0,clearTimeout(this.dblTimeout)):l.DD.justDragged||(h.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){h.Konva.inDblClickWindow=!1}),h.Konva.dblClickWindow),r&&r.isListening()?(this.clickEndShape=r,r._fireAndBubble(m,{evt:t,pointerId:e}),h.Konva.listenClickTap&&i&&i._id===r._id&&(r._fireAndBubble(C,{evt:t,pointerId:e}),a&&n&&n===r&&r._fireAndBubble(P,{evt:t,pointerId:e}))):(this.clickEndShape=null,this._fire(m,{evt:t,target:this,currentTarget:this,pointerId:e}),h.Konva.listenClickTap&&this._fire(C,{evt:t,target:this,currentTarget:this,pointerId:e}),a&&this._fire(P,{evt:t,target:this,currentTarget:this,pointerId:e})),this._fire("contentMouseup",{evt:t}),h.Konva.listenClickTap&&(this._fire("contentClick",{evt:t}),a&&this._fire("contentDblclick",{evt:t})),h.Konva.listenClickTap=!1,t.cancelable&&t.preventDefault()},r.prototype._contextmenu=function(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(w,{evt:t}):this._fire(w,{evt:t,target:this,currentTarget:this}),this._fire("contentContextmenu",{evt:t})},r.prototype._touchstart=function(t){var e=this;this.setPointersPositions(t);var r=!1;this._changedPointerPositions.forEach((function(i){var n=e.getIntersection(i);h.Konva.listenClickTap=!0,l.DD.justDragged=!1,n&&n.isListening()&&(h.Konva.captureTouchEventsEnabled&&n.setPointerCapture(i.id),e.tapStartShape=n,n._fireAndBubble(T,{evt:t,pointerId:i.id},e),r=!0,n.isListening()&&n.preventDefault()&&t.cancelable&&t.preventDefault())})),r||this._fire(T,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchstart",{evt:t})},r.prototype._touchmove=function(t){var e=this;if(this.setPointersPositions(t),!l.DD.isDragging||h.Konva.hitOnDragEnabled){var r=!1,i={};this._changedPointerPositions.forEach((function(n){var o=u.getCapturedShape(n.id)||e.getIntersection(n);o&&o.isListening()&&(i[o._id]||(i[o._id]=!0,o._fireAndBubble(O,{evt:t,pointerId:n.id}),r=!0,o.isListening()&&o.preventDefault()&&t.cancelable&&t.preventDefault()))})),r||this._fire(O,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchmove",{evt:t})}l.DD.isDragging&&l.DD.node.preventDefault()&&t.cancelable&&t.preventDefault()},r.prototype._touchend=function(t){var e=this;this.setPointersPositions(t);var r=this.tapEndShape,i=!1;h.Konva.inDblClickWindow?(i=!0,clearTimeout(this.dblTimeout)):l.DD.justDragged||(h.Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout((function(){h.Konva.inDblClickWindow=!1}),h.Konva.dblClickWindow);var n=!1,o={},a=!1,s=!1;this._changedPointerPositions.forEach((function(c){var l=u.getCapturedShape(c.id)||e.getIntersection(c);l&&l.releaseCapture(c.id),l&&l.isListening()&&(o[l._id]||(o[l._id]=!0,e.tapEndShape=l,l._fireAndBubble(k,{evt:t,pointerId:c.id}),n=!0,h.Konva.listenClickTap&&l===e.tapStartShape&&(a=!0,l._fireAndBubble("tap",{evt:t,pointerId:c.id}),i&&r&&r===l&&(s=!0,l._fireAndBubble(A,{evt:t,pointerId:c.id}))),l.isListening()&&l.preventDefault()&&t.cancelable&&t.preventDefault()))})),n||this._fire(k,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),h.Konva.listenClickTap&&!a&&(this.tapEndShape=null,this._fire("tap",{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id})),i&&!s&&this._fire(A,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),this._fire("contentTouchend",{evt:t}),h.Konva.listenClickTap&&(this._fire("contentTap",{evt:t}),i&&this._fire("contentDbltap",{evt:t})),this.preventDefault()&&t.cancelable&&t.preventDefault(),h.Konva.listenClickTap=!1},r.prototype._wheel=function(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(M,{evt:t}):this._fire(M,{evt:t,target:this,currentTarget:this}),this._fire("contentWheel",{evt:t})},r.prototype._pointerdown=function(t){if(h.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=u.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(x,u.createEvent(t))}},r.prototype._pointermove=function(t){if(h.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=u.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(b,u.createEvent(t))}},r.prototype._pointerup=function(t){if(h.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=u.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(S,u.createEvent(t)),u.releaseCapture(t.pointerId)}},r.prototype._pointercancel=function(t){if(h.Konva._pointerEventsEnabled){this.setPointersPositions(t);var e=u.getCapturedShape(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(S,u.createEvent(t)),u.releaseCapture(t.pointerId)}},r.prototype._lostpointercapture=function(t){u.releaseCapture(t.pointerId)},r.prototype.setPointersPositions=function(t){var e=this,r=this._getContentPosition(),i=null,n=null;void 0!==(t=t||window.event).touches?(this._pointerPositions=[],this._changedPointerPositions=[],o.Collection.prototype.each.call(t.touches,(function(t){e._pointerPositions.push({id:t.identifier,x:(t.clientX-r.left)/r.scaleX,y:(t.clientY-r.top)/r.scaleY})})),o.Collection.prototype.each.call(t.changedTouches||t.touches,(function(t){e._changedPointerPositions.push({id:t.identifier,x:(t.clientX-r.left)/r.scaleX,y:(t.clientY-r.top)/r.scaleY})}))):(i=(t.clientX-r.left)/r.scaleX,n=(t.clientY-r.top)/r.scaleY,this.pointerPos={x:i,y:n},this._pointerPositions=[{x:i,y:n,id:o.Util._getFirstPointerId(t)}],this._changedPointerPositions=[{x:i,y:n,id:o.Util._getFirstPointerId(t)}])},r.prototype._setPointerPosition=function(t){o.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'),this.setPointersPositions(t)},r.prototype._getContentPosition=function(){if(!this.content||!this.content.getBoundingClientRect)return{top:0,left:0,scaleX:1,scaleY:1};var t=this.content.getBoundingClientRect();return{top:t.top,left:t.left,scaleX:t.width/this.content.clientWidth||1,scaleY:t.height/this.content.clientHeight||1}},r.prototype._buildDOM=function(){if(this.bufferCanvas=new c.SceneCanvas({width:this.width(),height:this.height()}),this.bufferHitCanvas=new c.HitCanvas({pixelRatio:1,width:this.width(),height:this.height()}),h.Konva.isBrowser){var t=this.container();if(!t)throw"Stage has no container. A container is required.";t.innerHTML="",this.content=document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this._resizeDOM()}},r.prototype.cache=function(){return o.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."),this},r.prototype.clearCache=function(){return this},r.prototype.batchDraw=function(){return this.children.each((function(t){t.batchDraw()})),this},r}(s.Container);e.Stage=D,D.prototype.nodeType="Stage",d._registerNode(D),a.Factory.addGetterSetter(D,"container")},8017:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(8588),n=r(6745),o=r(7939),a=r(4417),s={node:1,duration:1,easing:1,onFinish:1,yoyo:1},h=0,c=["fill","stroke","shadowColor"],l=function(){function t(t,e,r,i,n,o,a){this.prop=t,this.propFunc=e,this.begin=i,this._pos=i,this.duration=o,this._change=0,this.prevPos=0,this.yoyo=a,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=r,this._change=n-this.begin,this.pause()}return t.prototype.fire=function(t){var e=this[t];e&&e()},t.prototype.setTime=function(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())},t.prototype.getTime=function(){return this._time},t.prototype.setPosition=function(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t},t.prototype.getPosition=function(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)},t.prototype.play=function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},t.prototype.reverse=function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},t.prototype.seek=function(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")},t.prototype.reset=function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},t.prototype.finish=function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},t.prototype.update=function(){this.setPosition(this.getPosition(this._time)),this.fire("onUpdate")},t.prototype.onEnterFrame=function(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)},t.prototype.pause=function(){this.state=1,this.fire("onPause")},t.prototype.getTimer=function(){return(new Date).getTime()},t}(),d=function(){function t(r){var o,c,d=this,u=r.node,p=u._id,f=r.easing||e.Easings.Linear,g=!!r.yoyo;o=void 0===r.duration?.3:0===r.duration?.001:r.duration,this.node=u,this._id=h++;var y=u.getLayer()||(u instanceof a.Konva.Stage?u.getLayers():null);for(c in y||i.Util.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new n.Animation((function(){d.tween.onEnterFrame()}),y),this.tween=new l(c,(function(t){d._tweenFunc(t)}),f,0,1,1e3*o,g),this._addListeners(),t.attrs[p]||(t.attrs[p]={}),t.attrs[p][this._id]||(t.attrs[p][this._id]={}),t.tweens[p]||(t.tweens[p]={}),r)void 0===s[c]&&this._addAttr(c,r[c]);this.reset(),this.onFinish=r.onFinish,this.onReset=r.onReset,this.onUpdate=r.onUpdate}return t.prototype._addAttr=function(e,r){var n,o,a,s,h,l,d,u,p=this.node,f=p._id;if((a=t.tweens[f][e])&&delete t.attrs[f][a][e],n=p.getAttr(e),i.Util._isArray(r))if(o=[],h=Math.max(r.length,n.length),"points"===e&&r.length!==n.length&&(r.length>n.length?(d=n,n=i.Util._prepareArrayForTween(n,r,p.closed())):(l=r,r=i.Util._prepareArrayForTween(r,n,p.closed()))),0===e.indexOf("fill"))for(s=0;s<h;s++)if(s%2==0)o.push(r[s]-n[s]);else{var g=i.Util.colorToRGBA(n[s]);u=i.Util.colorToRGBA(r[s]),n[s]=g,o.push({r:u.r-g.r,g:u.g-g.g,b:u.b-g.b,a:u.a-g.a})}else for(s=0;s<h;s++)o.push(r[s]-n[s]);else-1!==c.indexOf(e)?(n=i.Util.colorToRGBA(n),o={r:(u=i.Util.colorToRGBA(r)).r-n.r,g:u.g-n.g,b:u.b-n.b,a:u.a-n.a}):o=r-n;t.attrs[f][this._id][e]={start:n,diff:o,end:r,trueEnd:l,trueStart:d},t.tweens[f][e]=this._id},t.prototype._tweenFunc=function(e){var r,n,o,a,s,h,l,d,u=this.node,p=t.attrs[u._id][this._id];for(r in p){if(o=(n=p[r]).start,a=n.diff,d=n.end,i.Util._isArray(o))if(s=[],l=Math.max(o.length,d.length),0===r.indexOf("fill"))for(h=0;h<l;h++)h%2==0?s.push((o[h]||0)+a[h]*e):s.push("rgba("+Math.round(o[h].r+a[h].r*e)+","+Math.round(o[h].g+a[h].g*e)+","+Math.round(o[h].b+a[h].b*e)+","+(o[h].a+a[h].a*e)+")");else for(h=0;h<l;h++)s.push((o[h]||0)+a[h]*e);else s=-1!==c.indexOf(r)?"rgba("+Math.round(o.r+a.r*e)+","+Math.round(o.g+a.g*e)+","+Math.round(o.b+a.b*e)+","+(o.a+a.a*e)+")":o+a*e;u.setAttr(r,s)}},t.prototype._addListeners=function(){var e=this;this.tween.onPlay=function(){e.anim.start()},this.tween.onReverse=function(){e.anim.start()},this.tween.onPause=function(){e.anim.stop()},this.tween.onFinish=function(){var r=e.node,i=t.attrs[r._id][e._id];i.points&&i.points.trueEnd&&r.setAttr("points",i.points.trueEnd),e.onFinish&&e.onFinish.call(e)},this.tween.onReset=function(){var r=e.node,i=t.attrs[r._id][e._id];i.points&&i.points.trueStart&&r.points(i.points.trueStart),e.onReset&&e.onReset()},this.tween.onUpdate=function(){e.onUpdate&&e.onUpdate.call(e)}},t.prototype.play=function(){return this.tween.play(),this},t.prototype.reverse=function(){return this.tween.reverse(),this},t.prototype.reset=function(){return this.tween.reset(),this},t.prototype.seek=function(t){return this.tween.seek(1e3*t),this},t.prototype.pause=function(){return this.tween.pause(),this},t.prototype.finish=function(){return this.tween.finish(),this},t.prototype.destroy=function(){var e,r=this.node._id,i=this._id,n=t.tweens[r];for(e in this.pause(),n)delete t.tweens[r][e];delete t.attrs[r][i]},t.attrs={},t.tweens={},t}();e.Tween=d,o.Node.prototype.to=function(t){var e=t.onFinish;t.node=this,t.onFinish=function(){this.destroy(),e&&e()},new d(t).play()},e.Easings={BackEaseIn:function(t,e,r,i){var n=1.70158;return r*(t/=i)*t*((n+1)*t-n)+e},BackEaseOut:function(t,e,r,i){var n=1.70158;return r*((t=t/i-1)*t*((n+1)*t+n)+1)+e},BackEaseInOut:function(t,e,r,i){var n=1.70158;return(t/=i/2)<1?r/2*(t*t*((1+(n*=1.525))*t-n))+e:r/2*((t-=2)*t*((1+(n*=1.525))*t+n)+2)+e},ElasticEaseIn:function(t,e,r,i,n,o){var a=0;return 0===t?e:1==(t/=i)?e+r:(o||(o=.3*i),!n||n<Math.abs(r)?(n=r,a=o/4):a=o/(2*Math.PI)*Math.asin(r/n),-n*Math.pow(2,10*(t-=1))*Math.sin((t*i-a)*(2*Math.PI)/o)+e)},ElasticEaseOut:function(t,e,r,i,n,o){var a=0;return 0===t?e:1==(t/=i)?e+r:(o||(o=.3*i),!n||n<Math.abs(r)?(n=r,a=o/4):a=o/(2*Math.PI)*Math.asin(r/n),n*Math.pow(2,-10*t)*Math.sin((t*i-a)*(2*Math.PI)/o)+r+e)},ElasticEaseInOut:function(t,e,r,i,n,o){var a=0;return 0===t?e:2==(t/=i/2)?e+r:(o||(o=i*(.3*1.5)),!n||n<Math.abs(r)?(n=r,a=o/4):a=o/(2*Math.PI)*Math.asin(r/n),t<1?n*Math.pow(2,10*(t-=1))*Math.sin((t*i-a)*(2*Math.PI)/o)*-.5+e:n*Math.pow(2,-10*(t-=1))*Math.sin((t*i-a)*(2*Math.PI)/o)*.5+r+e)},BounceEaseOut:function(t,e,r,i){return(t/=i)<1/2.75?r*(7.5625*t*t)+e:t<2/2.75?r*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?r*(7.5625*(t-=2.25/2.75)*t+.9375)+e:r*(7.5625*(t-=2.625/2.75)*t+.984375)+e},BounceEaseIn:function(t,r,i,n){return i-e.Easings.BounceEaseOut(n-t,0,i,n)+r},BounceEaseInOut:function(t,r,i,n){return t<n/2?.5*e.Easings.BounceEaseIn(2*t,0,i,n)+r:.5*e.Easings.BounceEaseOut(2*t-n,0,i,n)+.5*i+r},EaseIn:function(t,e,r,i){return r*(t/=i)*t+e},EaseOut:function(t,e,r,i){return-r*(t/=i)*(t-2)+e},EaseInOut:function(t,e,r,i){return(t/=i/2)<1?r/2*t*t+e:-r/2*(--t*(t-2)-1)+e},StrongEaseIn:function(t,e,r,i){return r*(t/=i)*t*t*t*t+e},StrongEaseOut:function(t,e,r,i){return r*((t=t/i-1)*t*t*t*t+1)+e},StrongEaseInOut:function(t,e,r,i){return(t/=i/2)<1?r/2*t*t*t*t*t+e:r/2*((t-=2)*t*t*t*t+2)+e},Linear:function(t,e,r,i){return r*t/i+e}}},8588:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(4417),n=function(){function t(){}return t.toCollection=function(e){var r,i=new t,n=e.length;for(r=0;r<n;r++)i.push(e[r]);return i},t._mapMethod=function(e){t.prototype[e]=function(){var t,r=this.length,i=[].slice.call(arguments);for(t=0;t<r;t++)this[t][e].apply(this[t],i);return this}},t.mapMethods=function(e){var r=e.prototype;for(var i in r)t._mapMethod(i)},t}();e.Collection=n,n.prototype=[],n.prototype.each=function(t){for(var e=0;e<this.length;e++)t(this[e],e)},n.prototype.toArray=function(){var t,e=[],r=this.length;for(t=0;t<r;t++)e.push(this[t]);return e};var o=function(){function t(t){void 0===t&&(t=[1,0,0,1,0,0]),this.dirty=!1,this.m=t&&t.slice()||[1,0,0,1,0,0]}return t.prototype.reset=function(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=1,this.m[4]=0,this.m[5]=0},t.prototype.copy=function(){return new t(this.m)},t.prototype.copyInto=function(t){t.m[0]=this.m[0],t.m[1]=this.m[1],t.m[2]=this.m[2],t.m[3]=this.m[3],t.m[4]=this.m[4],t.m[5]=this.m[5]},t.prototype.point=function(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}},t.prototype.translate=function(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this},t.prototype.scale=function(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this},t.prototype.rotate=function(t){var e=Math.cos(t),r=Math.sin(t),i=this.m[0]*e+this.m[2]*r,n=this.m[1]*e+this.m[3]*r,o=this.m[0]*-r+this.m[2]*e,a=this.m[1]*-r+this.m[3]*e;return this.m[0]=i,this.m[1]=n,this.m[2]=o,this.m[3]=a,this},t.prototype.getTranslation=function(){return{x:this.m[4],y:this.m[5]}},t.prototype.skew=function(t,e){var r=this.m[0]+this.m[2]*e,i=this.m[1]+this.m[3]*e,n=this.m[2]+this.m[0]*t,o=this.m[3]+this.m[1]*t;return this.m[0]=r,this.m[1]=i,this.m[2]=n,this.m[3]=o,this},t.prototype.multiply=function(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],r=this.m[1]*t.m[0]+this.m[3]*t.m[1],i=this.m[0]*t.m[2]+this.m[2]*t.m[3],n=this.m[1]*t.m[2]+this.m[3]*t.m[3],o=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],a=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=r,this.m[2]=i,this.m[3]=n,this.m[4]=o,this.m[5]=a,this},t.prototype.invert=function(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,r=-this.m[1]*t,i=-this.m[2]*t,n=this.m[0]*t,o=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),a=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=r,this.m[2]=i,this.m[3]=n,this.m[4]=o,this.m[5]=a,this},t.prototype.getMatrix=function(){return this.m},t.prototype.setAbsolutePosition=function(t,e){var r=this.m[0],i=this.m[1],n=this.m[2],o=this.m[3],a=this.m[4],s=(r*(e-this.m[5])-i*(t-a))/(r*o-i*n),h=(t-a-n*s)/r;return this.translate(h,s)},t.prototype.decompose=function(){var t=this.m[0],r=this.m[1],i=this.m[2],n=this.m[3],o=t*n-r*i,a={x:this.m[4],y:this.m[5],rotation:0,scaleX:0,scaleY:0,skewX:0,skewY:0};if(0!=t||0!=r){var s=Math.sqrt(t*t+r*r);a.rotation=r>0?Math.acos(t/s):-Math.acos(t/s),a.scaleX=s,a.scaleY=o/s,a.skewX=(t*i+r*n)/o,a.skewY=0}else if(0!=i||0!=n){var h=Math.sqrt(i*i+n*n);a.rotation=Math.PI/2-(n>0?Math.acos(-i/h):-Math.acos(i/h)),a.scaleX=o/h,a.scaleY=h,a.skewX=0,a.skewY=(t*i+r*n)/o}return a.rotation=e.Util._getRotation(a.rotation),a},t}();e.Transform=o;var a=Math.PI/180,s=180/Math.PI,h="Konva error: ",c={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},l=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/,d=[];e.Util={_isElement:function(t){return!(!t||1!=t.nodeType)},_isFunction:function(t){return!!(t&&t.constructor&&t.call&&t.apply)},_isPlainObject:function(t){return!!t&&t.constructor===Object},_isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},_isNumber:function(t){return"[object Number]"===Object.prototype.toString.call(t)&&!isNaN(t)&&isFinite(t)},_isString:function(t){return"[object String]"===Object.prototype.toString.call(t)},_isBoolean:function(t){return"[object Boolean]"===Object.prototype.toString.call(t)},isObject:function(t){return t instanceof Object},isValidSelector:function(t){if("string"!=typeof t)return!1;var e=t[0];return"#"===e||"."===e||e===e.toUpperCase()},_sign:function(t){return 0===t?0:t>0?1:-1},requestAnimFrame:function(t){d.push(t),1===d.length&&requestAnimationFrame((function(){var t=d;d=[],t.forEach((function(t){t()}))}))},createCanvasElement:function(){var t=document.createElement("canvas");try{t.style=t.style||{}}catch(t){}return t},createImageElement:function(){return document.createElement("img")},_isInDocument:function(t){for(;t=t.parentNode;)if(t==document)return!0;return!1},_simplifyArray:function(t){var r,i,n=[],o=t.length,a=e.Util;for(r=0;r<o;r++)i=t[r],a._isNumber(i)?i=Math.round(1e3*i)/1e3:a._isString(i)||(i=i.toString()),n.push(i);return n},_urlToImage:function(t,e){var r=new i.glob.Image;r.onload=function(){e(r)},r.src=t},_rgbToHex:function(t,e,r){return((1<<24)+(t<<16)+(e<<8)+r).toString(16).slice(1)},_hexToRgb:function(t){t=t.replace("#","");var e=parseInt(t,16);return{r:e>>16&255,g:e>>8&255,b:255&e}},getRandomColor:function(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},get:function(t,e){return void 0===t?e:t},getRGB:function(t){var e;return t in c?{r:(e=c[t])[0],g:e[1],b:e[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(e=l.exec(t.replace(/ /g,"")),{r:parseInt(e[1],10),g:parseInt(e[2],10),b:parseInt(e[3],10)}):{r:0,g:0,b:0}},colorToRGBA:function(t){return t=t||"black",e.Util._namedColorToRBA(t)||e.Util._hex3ColorToRGBA(t)||e.Util._hex6ColorToRGBA(t)||e.Util._rgbColorToRGBA(t)||e.Util._rgbaColorToRGBA(t)||e.Util._hslColorToRGBA(t)},_namedColorToRBA:function(t){var e=c[t.toLowerCase()];return e?{r:e[0],g:e[1],b:e[2],a:1}:null},_rgbColorToRGBA:function(t){if(0===t.indexOf("rgb(")){var e=(t=t.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:1}}},_rgbaColorToRGBA:function(t){if(0===t.indexOf("rgba(")){var e=(t=t.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:e[3]}}},_hex6ColorToRGBA:function(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:1}},_hex3ColorToRGBA:function(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:1}},_hslColorToRGBA:function(t){if(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(t)){var e,r=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(t),i=(r[0],r.slice(1)),n=Number(i[0])/360,o=Number(i[1])/100,a=Number(i[2])/100,s=void 0,h=void 0;if(0===o)return h=255*a,{r:Math.round(h),g:Math.round(h),b:Math.round(h),a:1};for(var c=2*a-(e=a<.5?a*(1+o):a+o-a*o),l=[0,0,0],d=0;d<3;d++)(s=n+1/3*-(d-1))<0&&s++,s>1&&s--,h=6*s<1?c+6*(e-c)*s:2*s<1?e:3*s<2?c+(e-c)*(2/3-s)*6:c,l[d]=255*h;return{r:Math.round(l[0]),g:Math.round(l[1]),b:Math.round(l[2]),a:1}}},haveIntersection:function(t,e){return!(e.x>t.x+t.width||e.x+e.width<t.x||e.y>t.y+t.height||e.y+e.height<t.y)},cloneObject:function(t){var e={};for(var r in t)this._isPlainObject(t[r])?e[r]=this.cloneObject(t[r]):this._isArray(t[r])?e[r]=this.cloneArray(t[r]):e[r]=t[r];return e},cloneArray:function(t){return t.slice(0)},_degToRad:function(t){return t*a},_radToDeg:function(t){return t*s},_getRotation:function(t){return i.Konva.angleDeg?e.Util._radToDeg(t):t},_capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},throw:function(t){throw new Error(h+t)},error:function(t){console.error(h+t)},warn:function(t){i.Konva.showWarnings&&console.warn("Konva warning: "+t)},extend:function(t,e){function r(){this.constructor=t}r.prototype=e.prototype;var i=t.prototype;for(var n in t.prototype=new r,i)i.hasOwnProperty(n)&&(t.prototype[n]=i[n]);t.__super__=e.prototype,t.super=e},_getControlPoints:function(t,e,r,i,n,o,a){var s=Math.sqrt(Math.pow(r-t,2)+Math.pow(i-e,2)),h=Math.sqrt(Math.pow(n-r,2)+Math.pow(o-i,2)),c=a*s/(s+h),l=a*h/(s+h);return[r-c*(n-t),i-c*(o-e),r+l*(n-t),i+l*(o-e)]},_expandPoints:function(t,r){var i,n,o=t.length,a=[];for(i=2;i<o-2;i+=2)n=e.Util._getControlPoints(t[i-2],t[i-1],t[i],t[i+1],t[i+2],t[i+3],r),a.push(n[0]),a.push(n[1]),a.push(t[i]),a.push(t[i+1]),a.push(n[2]),a.push(n[3]);return a},each:function(t,e){for(var r in t)e(r,t[r])},_inRange:function(t,e,r){return e<=t&&t<r},_getProjectionToSegment:function(t,e,r,i,n,o){var a,s,h,c=(t-r)*(t-r)+(e-i)*(e-i);if(0==c)a=t,s=e,h=(n-r)*(n-r)+(o-i)*(o-i);else{var l=((n-t)*(r-t)+(o-e)*(i-e))/c;l<0?(a=t,s=e,h=(t-n)*(t-n)+(e-o)*(e-o)):l>1?(a=r,s=i,h=(r-n)*(r-n)+(i-o)*(i-o)):h=((a=t+l*(r-t))-n)*(a-n)+((s=e+l*(i-e))-o)*(s-o)}return[a,s,h]},_getProjectionToLine:function(t,r,i){var n=e.Util.cloneObject(t),o=Number.MAX_VALUE;return r.forEach((function(a,s){if(i||s!==r.length-1){var h=r[(s+1)%r.length],c=e.Util._getProjectionToSegment(a.x,a.y,h.x,h.y,t.x,t.y),l=c[0],d=c[1],u=c[2];u<o&&(n.x=l,n.y=d,o=u)}})),n},_prepareArrayForTween:function(t,r,i){var n,o=[],a=[];if(t.length>r.length){var s=r;r=t,t=s}for(n=0;n<t.length;n+=2)o.push({x:t[n],y:t[n+1]});for(n=0;n<r.length;n+=2)a.push({x:r[n],y:r[n+1]});var h=[];return a.forEach((function(t){var r=e.Util._getProjectionToLine(t,o,i);h.push(r.x),h.push(r.y)})),h},_prepareToStringify:function(t){var r;for(var i in t.visitedByCircularReferenceRemoval=!0,t)if(t.hasOwnProperty(i)&&t[i]&&"object"==typeof t[i])if(r=Object.getOwnPropertyDescriptor(t,i),t[i].visitedByCircularReferenceRemoval||e.Util._isElement(t[i])){if(!r.configurable)return null;delete t[i]}else if(null===e.Util._prepareToStringify(t[i])){if(!r.configurable)return null;delete t[i]}return delete t.visitedByCircularReferenceRemoval,t},_assign:function(t,e){for(var r in e)t[r]=e[r];return t},_getFirstPointerId:function(t){return t.touches?t.changedTouches[0].identifier:999}}},3774:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(4417),n=r(8588);function o(t){return n.Util._isString(t)?'"'+t+'"':"[object Number]"===Object.prototype.toString.call(t)||n.Util._isBoolean(t)?t:Object.prototype.toString.call(t)}e.RGBComponent=function(t){return t>255?255:t<0?0:Math.round(t)},e.alphaComponent=function(t){return t>1?1:t<1e-4?1e-4:t},e.getNumberValidator=function(){if(i.Konva.isUnminified)return function(t,e){return n.Util._isNumber(t)||n.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a number.'),t}},e.getNumberOrArrayOfNumbersValidator=function(t){if(i.Konva.isUnminified)return function(e,r){var i=n.Util._isNumber(e),a=n.Util._isArray(e)&&e.length==t;return i||a||n.Util.warn(o(e)+' is a not valid value for "'+r+'" attribute. The value should be a number or Array<number>('+t+")"),e}},e.getNumberOrAutoValidator=function(){if(i.Konva.isUnminified)return function(t,e){return n.Util._isNumber(t)||"auto"===t||n.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a number or "auto".'),t}},e.getStringValidator=function(){if(i.Konva.isUnminified)return function(t,e){return n.Util._isString(t)||n.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a string.'),t}},e.getStringOrGradientValidator=function(){if(i.Konva.isUnminified)return function(t,e){var r=n.Util._isString(t),i="[object CanvasGradient]"===Object.prototype.toString.call(t);return r||i||n.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a string or a native gradient.'),t}},e.getFunctionValidator=function(){if(i.Konva.isUnminified)return function(t,e){return n.Util._isFunction(t)||n.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a function.'),t}},e.getNumberArrayValidator=function(){if(i.Konva.isUnminified)return function(t,e){return n.Util._isArray(t)?t.forEach((function(t){n.Util._isNumber(t)||n.Util.warn('"'+e+'" attribute has non numeric element '+t+". Make sure that all elements are numbers.")})):n.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a array of numbers.'),t}},e.getBooleanValidator=function(){if(i.Konva.isUnminified)return function(t,e){return!0===t||!1===t||n.Util.warn(o(t)+' is a not valid value for "'+e+'" attribute. The value should be a boolean.'),t}},e.getComponentValidator=function(t){if(i.Konva.isUnminified)return function(e,r){return n.Util.isObject(e)||n.Util.warn(o(e)+' is a not valid value for "'+r+'" attribute. The value should be an object with properties '+t),e}}},3986:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(4417),n=r(8588),o=r(7939),a=r(8783),s=r(8342),h=r(4415),c=r(3980),l=r(8985),d=r(210),u=r(7955),p=r(6745),f=r(8017),g=r(3442),y=r(4842);e.Konva=n.Util._assign(i.Konva,{Collection:n.Collection,Util:n.Util,Transform:n.Transform,Node:o.Node,ids:o.ids,names:o.names,Container:a.Container,Stage:s.Stage,stages:s.stages,Layer:h.Layer,FastLayer:c.FastLayer,Group:l.Group,DD:d.DD,Shape:u.Shape,shapes:u.shapes,Animation:p.Animation,Tween:f.Tween,Easings:f.Easings,Context:g.Context,Canvas:y.Canvas})},2076:(t,e,r)=>{"use strict";var i=r(3986),n=r(119),o=r(2064),a=r(7643),s=r(535),h=r(1298),c=r(6067),l=r(7149),d=r(7339),u=r(5244),p=r(1785),f=r(657),g=r(8986),y=r(1964),v=r(3787),_=r(2831),m=r(9516),b=r(9846),x=r(2527),S=r(6672),w=r(5309),C=r(1695),P=r(9621),T=r(1179),k=r(7194),A=r(3925),O=r(5751),M=r(6588),F=r(3565),E=r(5929),N=r(7233),G=r(8590),D=r(8280),R=r(3438),L=r(6703),I=r(1665),U=r(1863);e.S=i.Konva.Util._assign(i.Konva,{Arc:n.Arc,Arrow:o.Arrow,Circle:a.Circle,Ellipse:s.Ellipse,Image:h.Image,Label:c.Label,Tag:c.Tag,Line:l.Line,Path:d.Path,Rect:u.Rect,RegularPolygon:p.RegularPolygon,Ring:f.Ring,Sprite:g.Sprite,Star:y.Star,Text:v.Text,TextPath:_.TextPath,Transformer:m.Transformer,Wedge:b.Wedge,Filters:{Blur:x.Blur,Brighten:S.Brighten,Contrast:w.Contrast,Emboss:C.Emboss,Enhance:P.Enhance,Grayscale:T.Grayscale,HSL:k.HSL,HSV:A.HSV,Invert:O.Invert,Kaleidoscope:M.Kaleidoscope,Mask:F.Mask,Noise:E.Noise,Pixelate:N.Pixelate,Posterize:G.Posterize,RGB:D.RGB,RGBA:R.RGBA,Sepia:L.Sepia,Solarize:I.Solarize,Threshold:U.Threshold}})},2527:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);function a(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var s=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],h=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];e.Blur=function(t){var e=Math.round(this.blurRadius());e>0&&function(t,e){var r,i,n,o,c,l,d,u,p,f,g,y,v,_,m,b,x,S,w,C,P,T,k,A,O=t.data,M=t.width,F=t.height,E=e+e+1,N=M-1,G=F-1,D=e+1,R=D*(D+1)/2,L=new a,I=null,U=L,j=null,B=null,W=s[e],H=h[e];for(n=1;n<E;n++)U=U.next=new a,n===D&&(I=U);for(U.next=L,d=l=0,i=0;i<F;i++){for(b=x=S=w=u=p=f=g=0,y=D*(C=O[l]),v=D*(P=O[l+1]),_=D*(T=O[l+2]),m=D*(k=O[l+3]),u+=R*C,p+=R*P,f+=R*T,g+=R*k,U=L,n=0;n<D;n++)U.r=C,U.g=P,U.b=T,U.a=k,U=U.next;for(n=1;n<D;n++)o=l+((N<n?N:n)<<2),u+=(U.r=C=O[o])*(A=D-n),p+=(U.g=P=O[o+1])*A,f+=(U.b=T=O[o+2])*A,g+=(U.a=k=O[o+3])*A,b+=C,x+=P,S+=T,w+=k,U=U.next;for(j=L,B=I,r=0;r<M;r++)O[l+3]=k=g*W>>H,0!==k?(k=255/k,O[l]=(u*W>>H)*k,O[l+1]=(p*W>>H)*k,O[l+2]=(f*W>>H)*k):O[l]=O[l+1]=O[l+2]=0,u-=y,p-=v,f-=_,g-=m,y-=j.r,v-=j.g,_-=j.b,m-=j.a,o=d+((o=r+e+1)<N?o:N)<<2,u+=b+=j.r=O[o],p+=x+=j.g=O[o+1],f+=S+=j.b=O[o+2],g+=w+=j.a=O[o+3],j=j.next,y+=C=B.r,v+=P=B.g,_+=T=B.b,m+=k=B.a,b-=C,x-=P,S-=T,w-=k,B=B.next,l+=4;d+=M}for(r=0;r<M;r++){for(x=S=w=b=p=f=g=u=0,y=D*(C=O[l=r<<2]),v=D*(P=O[l+1]),_=D*(T=O[l+2]),m=D*(k=O[l+3]),u+=R*C,p+=R*P,f+=R*T,g+=R*k,U=L,n=0;n<D;n++)U.r=C,U.g=P,U.b=T,U.a=k,U=U.next;for(c=M,n=1;n<=e;n++)l=c+r<<2,u+=(U.r=C=O[l])*(A=D-n),p+=(U.g=P=O[l+1])*A,f+=(U.b=T=O[l+2])*A,g+=(U.a=k=O[l+3])*A,b+=C,x+=P,S+=T,w+=k,U=U.next,n<G&&(c+=M);for(l=r,j=L,B=I,i=0;i<F;i++)O[3+(o=l<<2)]=k=g*W>>H,k>0?(k=255/k,O[o]=(u*W>>H)*k,O[o+1]=(p*W>>H)*k,O[o+2]=(f*W>>H)*k):O[o]=O[o+1]=O[o+2]=0,u-=y,p-=v,f-=_,g-=m,y-=j.r,v-=j.g,_-=j.b,m-=j.a,o=r+((o=i+D)<G?o:G)*M<<2,u+=b+=j.r=O[o],p+=x+=j.g=O[o+1],f+=S+=j.b=O[o+2],g+=w+=j.a=O[o+3],j=j.next,y+=C=B.r,v+=P=B.g,_+=T=B.b,m+=k=B.a,b-=C,x-=P,S-=T,w-=k,B=B.next,l+=M}}(t,e)},i.Factory.addGetterSetter(n.Node,"blurRadius",0,o.getNumberValidator(),i.Factory.afterSetFilter)},6672:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);e.Brighten=function(t){var e,r=255*this.brightness(),i=t.data,n=i.length;for(e=0;e<n;e+=4)i[e]+=r,i[e+1]+=r,i[e+2]+=r},i.Factory.addGetterSetter(n.Node,"brightness",0,o.getNumberValidator(),i.Factory.afterSetFilter)},5309:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);e.Contrast=function(t){var e,r=Math.pow((this.contrast()+100)/100,2),i=t.data,n=i.length,o=150,a=150,s=150;for(e=0;e<n;e+=4)o=i[e],a=i[e+1],s=i[e+2],o/=255,o-=.5,o*=r,o+=.5,a/=255,a-=.5,a*=r,a+=.5,s/=255,s-=.5,s*=r,s+=.5,o=(o*=255)<0?0:o>255?255:o,a=(a*=255)<0?0:a>255?255:a,s=(s*=255)<0?0:s>255?255:s,i[e]=o,i[e+1]=a,i[e+2]=s},i.Factory.addGetterSetter(n.Node,"contrast",0,o.getNumberValidator(),i.Factory.afterSetFilter)},1695:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(8588),a=r(3774);e.Emboss=function(t){var e=10*this.embossStrength(),r=255*this.embossWhiteLevel(),i=this.embossDirection(),n=this.embossBlend(),a=0,s=0,h=t.data,c=t.width,l=t.height,d=4*c,u=l;switch(i){case"top-left":a=-1,s=-1;break;case"top":a=-1,s=0;break;case"top-right":a=-1,s=1;break;case"right":a=0,s=1;break;case"bottom-right":a=1,s=1;break;case"bottom":a=1,s=0;break;case"bottom-left":a=1,s=-1;break;case"left":a=0,s=-1;break;default:o.Util.error("Unknown emboss direction: "+i)}do{var p=(u-1)*d,f=a;u+f<1&&(f=0),u+f>l&&(f=0);var g=(u-1+f)*c*4,y=c;do{var v=p+4*(y-1),_=s;y+_<1&&(_=0),y+_>c&&(_=0);var m=g+4*(y-1+_),b=h[v]-h[m],x=h[v+1]-h[m+1],S=h[v+2]-h[m+2],w=b,C=w>0?w:-w;if((x>0?x:-x)>C&&(w=x),(S>0?S:-S)>C&&(w=S),w*=e,n){var P=h[v]+w,T=h[v+1]+w,k=h[v+2]+w;h[v]=P>255?255:P<0?0:P,h[v+1]=T>255?255:T<0?0:T,h[v+2]=k>255?255:k<0?0:k}else{var A=r-w;A<0?A=0:A>255&&(A=255),h[v]=h[v+1]=h[v+2]=A}}while(--y)}while(--u)},i.Factory.addGetterSetter(n.Node,"embossStrength",.5,a.getNumberValidator(),i.Factory.afterSetFilter),i.Factory.addGetterSetter(n.Node,"embossWhiteLevel",.5,a.getNumberValidator(),i.Factory.afterSetFilter),i.Factory.addGetterSetter(n.Node,"embossDirection","top-left",null,i.Factory.afterSetFilter),i.Factory.addGetterSetter(n.Node,"embossBlend",!1,null,i.Factory.afterSetFilter)},9621:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);function a(t,e,r,i,n){var o=r-e,a=n-i;return 0===o?i+a/2:0===a?i:a*((t-e)/o)+i}e.Enhance=function(t){var e,r,i,n,o=t.data,s=o.length,h=o[0],c=h,l=o[1],d=l,u=o[2],p=u,f=this.enhance();if(0!==f){for(n=0;n<s;n+=4)(e=o[n+0])<h?h=e:e>c&&(c=e),(r=o[n+1])<l?l=r:r>d&&(d=r),(i=o[n+2])<u?u=i:i>p&&(p=i);var g,y,v,_,m,b,x,S,w;for(c===h&&(c=255,h=0),d===l&&(d=255,l=0),p===u&&(p=255,u=0),f>0?(y=c+f*(255-c),v=h-f*(h-0),m=d+f*(255-d),b=l-f*(l-0),S=p+f*(255-p),w=u-f*(u-0)):(y=c+f*(c-(g=.5*(c+h))),v=h+f*(h-g),m=d+f*(d-(_=.5*(d+l))),b=l+f*(l-_),S=p+f*(p-(x=.5*(p+u))),w=u+f*(u-x)),n=0;n<s;n+=4)o[n+0]=a(o[n+0],h,c,v,y),o[n+1]=a(o[n+1],l,d,b,m),o[n+2]=a(o[n+2],u,p,w,S)}},i.Factory.addGetterSetter(n.Node,"enhance",0,o.getNumberValidator(),i.Factory.afterSetFilter)},1179:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Grayscale=function(t){var e,r,i=t.data,n=i.length;for(e=0;e<n;e+=4)r=.34*i[e]+.5*i[e+1]+.16*i[e+2],i[e]=r,i[e+1]=r,i[e+2]=r}},7194:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);i.Factory.addGetterSetter(n.Node,"hue",0,o.getNumberValidator(),i.Factory.afterSetFilter),i.Factory.addGetterSetter(n.Node,"saturation",0,o.getNumberValidator(),i.Factory.afterSetFilter),i.Factory.addGetterSetter(n.Node,"luminance",0,o.getNumberValidator(),i.Factory.afterSetFilter),e.HSL=function(t){var e,r,i,n,o,a=t.data,s=a.length,h=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,l=127*this.luminance(),d=1*h*Math.cos(c*Math.PI/180),u=1*h*Math.sin(c*Math.PI/180),p=.299+.701*d+.167*u,f=.587-.587*d+.33*u,g=.114-.114*d-.497*u,y=.299-.299*d-.328*u,v=.587+.413*d+.035*u,_=.114-.114*d+.293*u,m=.299-.3*d+1.25*u,b=.587-.586*d-1.05*u,x=.114+.886*d-.2*u;for(e=0;e<s;e+=4)r=a[e+0],i=a[e+1],n=a[e+2],o=a[e+3],a[e+0]=p*r+f*i+g*n+l,a[e+1]=y*r+v*i+_*n+l,a[e+2]=m*r+b*i+x*n+l,a[e+3]=o}},3925:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);e.HSV=function(t){var e,r,i,n,o,a=t.data,s=a.length,h=Math.pow(2,this.value()),c=Math.pow(2,this.saturation()),l=Math.abs(this.hue()+360)%360,d=h*c*Math.cos(l*Math.PI/180),u=h*c*Math.sin(l*Math.PI/180),p=.299*h+.701*d+.167*u,f=.587*h-.587*d+.33*u,g=.114*h-.114*d-.497*u,y=.299*h-.299*d-.328*u,v=.587*h+.413*d+.035*u,_=.114*h-.114*d+.293*u,m=.299*h-.3*d+1.25*u,b=.587*h-.586*d-1.05*u,x=.114*h+.886*d-.2*u;for(e=0;e<s;e+=4)r=a[e+0],i=a[e+1],n=a[e+2],o=a[e+3],a[e+0]=p*r+f*i+g*n,a[e+1]=y*r+v*i+_*n,a[e+2]=m*r+b*i+x*n,a[e+3]=o},i.Factory.addGetterSetter(n.Node,"hue",0,o.getNumberValidator(),i.Factory.afterSetFilter),i.Factory.addGetterSetter(n.Node,"saturation",0,o.getNumberValidator(),i.Factory.afterSetFilter),i.Factory.addGetterSetter(n.Node,"value",0,o.getNumberValidator(),i.Factory.afterSetFilter)},5751:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Invert=function(t){var e,r=t.data,i=r.length;for(e=0;e<i;e+=4)r[e]=255-r[e],r[e+1]=255-r[e+1],r[e+2]=255-r[e+2]}},6588:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(8588),a=r(3774);e.Kaleidoscope=function(t){var e,r,i,n,a,s,h,c,l,d=t.width,u=t.height,p=Math.round(this.kaleidoscopePower()),f=Math.round(this.kaleidoscopeAngle()),g=Math.floor(d*(f%360)/360);if(!(p<1)){var y=o.Util.createCanvasElement();y.width=d,y.height=u;var v=y.getContext("2d").getImageData(0,0,d,u);!function(t,e,r){var i,n,o,a,s=t.data,h=e.data,c=t.width,l=t.height,d=r.polarCenterX||c/2,u=r.polarCenterY||l/2,p=0,f=0,g=0,y=0,v=Math.sqrt(d*d+u*u);n=c-d,o=l-u,v=(a=Math.sqrt(n*n+o*o))>v?a:v;var _,m,b,x,S=l,w=c,C=360/w*Math.PI/180;for(m=0;m<w;m+=1)for(b=Math.sin(m*C),x=Math.cos(m*C),_=0;_<S;_+=1)n=Math.floor(d+v*_/S*x),p=s[0+(i=4*((o=Math.floor(u+v*_/S*b))*c+n))],f=s[i+1],g=s[i+2],y=s[i+3],h[0+(i=4*(m+_*c))]=p,h[i+1]=f,h[i+2]=g,h[i+3]=y}(t,v,{polarCenterX:d/2,polarCenterY:u/2});for(var _=d/Math.pow(2,p);_<=8;)_*=2,p-=1;var m=_=Math.ceil(_),b=0,x=m,S=1;for(g+_>d&&(b=m,x=0,S=-1),r=0;r<u;r+=1)for(e=b;e!==x;e+=S)c=4*(d*r+Math.round(e+g)%d),n=v.data[c+0],a=v.data[c+1],s=v.data[c+2],h=v.data[c+3],l=4*(d*r+e),v.data[l+0]=n,v.data[l+1]=a,v.data[l+2]=s,v.data[l+3]=h;for(r=0;r<u;r+=1)for(m=Math.floor(_),i=0;i<p;i+=1){for(e=0;e<m+1;e+=1)c=4*(d*r+e),n=v.data[c+0],a=v.data[c+1],s=v.data[c+2],h=v.data[c+3],l=4*(d*r+2*m-e-1),v.data[l+0]=n,v.data[l+1]=a,v.data[l+2]=s,v.data[l+3]=h;m*=2}!function(t,e,r){var i,n,o,a,s,h,c=t.data,l=e.data,d=t.width,u=t.height,p=r.polarCenterX||d/2,f=r.polarCenterY||u/2,g=0,y=0,v=0,_=0,m=Math.sqrt(p*p+f*f);n=d-p,o=u-f,m=(h=Math.sqrt(n*n+o*o))>m?h:m;var b,x,S,w=u,C=d,P=r.polarRotation||0;for(n=0;n<d;n+=1)for(o=0;o<u;o+=1)a=n-p,s=o-f,b=Math.sqrt(a*a+s*s)*w/m,x=(x=(180*Math.atan2(s,a)/Math.PI+360+P)%360)*C/360,S=Math.floor(x),g=c[0+(i=4*(Math.floor(b)*d+S))],y=c[i+1],v=c[i+2],_=c[i+3],l[0+(i=4*(o*d+n))]=g,l[i+1]=y,l[i+2]=v,l[i+3]=_}(v,t,{polarRotation:0})}},i.Factory.addGetterSetter(n.Node,"kaleidoscopePower",2,a.getNumberValidator(),i.Factory.afterSetFilter),i.Factory.addGetterSetter(n.Node,"kaleidoscopeAngle",0,a.getNumberValidator(),i.Factory.afterSetFilter)},3565:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);function a(t,e,r){var i=4*(r*t.width+e),n=[];return n.push(t.data[i++],t.data[i++],t.data[i++],t.data[i++]),n}function s(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2))}e.Mask=function(t){var e=function(t,e){var r=a(t,0,0),i=a(t,t.width-1,0),n=a(t,0,t.height-1),o=a(t,t.width-1,t.height-1),h=e||10;if(s(r,i)<h&&s(i,o)<h&&s(o,n)<h&&s(n,r)<h){for(var c=function(t){for(var e=[0,0,0],r=0;r<t.length;r++)e[0]+=t[r][0],e[1]+=t[r][1],e[2]+=t[r][2];return e[0]/=t.length,e[1]/=t.length,e[2]/=t.length,e}([i,r,o,n]),l=[],d=0;d<t.width*t.height;d++){var u=s(c,[t.data[4*d],t.data[4*d+1],t.data[4*d+2]]);l[d]=u<h?0:255}return l}}(t,this.threshold());return e&&function(t,e){for(var r=0;r<t.width*t.height;r++)t.data[4*r+3]=e[r]}(t,e=function(t,e,r){for(var i=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],n=Math.round(Math.sqrt(i.length)),o=Math.floor(n/2),a=[],s=0;s<r;s++)for(var h=0;h<e;h++){for(var c=s*e+h,l=0,d=0;d<n;d++)for(var u=0;u<n;u++){var p=s+d-o,f=h+u-o;if(p>=0&&p<r&&f>=0&&f<e){var g=i[d*n+u];l+=t[p*e+f]*g}}a[c]=l}return a}(e=function(t,e,r){for(var i=[1,1,1,1,1,1,1,1,1],n=Math.round(Math.sqrt(i.length)),o=Math.floor(n/2),a=[],s=0;s<r;s++)for(var h=0;h<e;h++){for(var c=s*e+h,l=0,d=0;d<n;d++)for(var u=0;u<n;u++){var p=s+d-o,f=h+u-o;if(p>=0&&p<r&&f>=0&&f<e){var g=i[d*n+u];l+=t[p*e+f]*g}}a[c]=l>=1020?255:0}return a}(e=function(t,e,r){for(var i=[1,1,1,1,0,1,1,1,1],n=Math.round(Math.sqrt(i.length)),o=Math.floor(n/2),a=[],s=0;s<r;s++)for(var h=0;h<e;h++){for(var c=s*e+h,l=0,d=0;d<n;d++)for(var u=0;u<n;u++){var p=s+d-o,f=h+u-o;if(p>=0&&p<r&&f>=0&&f<e){var g=i[d*n+u];l+=t[p*e+f]*g}}a[c]=2040===l?255:0}return a}(e,t.width,t.height),t.width,t.height),t.width,t.height)),t},i.Factory.addGetterSetter(n.Node,"threshold",0,o.getNumberValidator(),i.Factory.afterSetFilter)},5929:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);e.Noise=function(t){var e,r=255*this.noise(),i=t.data,n=i.length,o=r/2;for(e=0;e<n;e+=4)i[e+0]+=o-2*o*Math.random(),i[e+1]+=o-2*o*Math.random(),i[e+2]+=o-2*o*Math.random()},i.Factory.addGetterSetter(n.Node,"noise",.2,o.getNumberValidator(),i.Factory.afterSetFilter)},7233:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(8588),o=r(7939),a=r(3774);e.Pixelate=function(t){var e,r,i,o,a,s,h,c,l,d,u,p,f,g,y=Math.ceil(this.pixelSize()),v=t.width,_=t.height,m=Math.ceil(v/y),b=Math.ceil(_/y),x=t.data;if(y<=0)n.Util.error("pixelSize value can not be <= 0");else for(p=0;p<m;p+=1)for(f=0;f<b;f+=1){for(o=0,a=0,s=0,h=0,l=(c=p*y)+y,u=(d=f*y)+y,g=0,e=c;e<l;e+=1)if(!(e>=v))for(r=d;r<u;r+=1)r>=_||(o+=x[0+(i=4*(v*r+e))],a+=x[i+1],s+=x[i+2],h+=x[i+3],g+=1);for(o/=g,a/=g,s/=g,h/=g,e=c;e<l;e+=1)if(!(e>=v))for(r=d;r<u;r+=1)r>=_||(x[0+(i=4*(v*r+e))]=o,x[i+1]=a,x[i+2]=s,x[i+3]=h)}},i.Factory.addGetterSetter(o.Node,"pixelSize",8,a.getNumberValidator(),i.Factory.afterSetFilter)},8590:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);e.Posterize=function(t){var e,r=Math.round(254*this.levels())+1,i=t.data,n=i.length,o=255/r;for(e=0;e<n;e+=1)i[e]=Math.floor(i[e]/o)*o},i.Factory.addGetterSetter(n.Node,"levels",.5,o.getNumberValidator(),i.Factory.afterSetFilter)},8280:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);e.RGB=function(t){var e,r,i=t.data,n=i.length,o=this.red(),a=this.green(),s=this.blue();for(e=0;e<n;e+=4)r=(.34*i[e]+.5*i[e+1]+.16*i[e+2])/255,i[e]=r*o,i[e+1]=r*a,i[e+2]=r*s,i[e+3]=i[e+3]},i.Factory.addGetterSetter(n.Node,"red",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),i.Factory.addGetterSetter(n.Node,"green",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),i.Factory.addGetterSetter(n.Node,"blue",0,o.RGBComponent,i.Factory.afterSetFilter)},3438:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);e.RGBA=function(t){var e,r,i=t.data,n=i.length,o=this.red(),a=this.green(),s=this.blue(),h=this.alpha();for(e=0;e<n;e+=4)r=1-h,i[e]=o*h+i[e]*r,i[e+1]=a*h+i[e+1]*r,i[e+2]=s*h+i[e+2]*r},i.Factory.addGetterSetter(n.Node,"red",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),i.Factory.addGetterSetter(n.Node,"green",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),i.Factory.addGetterSetter(n.Node,"blue",0,o.RGBComponent,i.Factory.afterSetFilter),i.Factory.addGetterSetter(n.Node,"alpha",1,(function(t){return this._filterUpToDate=!1,t>1?1:t<0?0:t}))},6703:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Sepia=function(t){var e,r,i,n,o=t.data,a=o.length;for(e=0;e<a;e+=4)r=o[e+0],i=o[e+1],n=o[e+2],o[e+0]=Math.min(255,.393*r+.769*i+.189*n),o[e+1]=Math.min(255,.349*r+.686*i+.168*n),o[e+2]=Math.min(255,.272*r+.534*i+.131*n)}},1665:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Solarize=function(t){var e=t.data,r=t.width,i=4*r,n=t.height;do{var o=(n-1)*i,a=r;do{var s=o+4*(a-1),h=e[s],c=e[s+1],l=e[s+2];h>127&&(h=255-h),c>127&&(c=255-c),l>127&&(l=255-l),e[s]=h,e[s+1]=c,e[s+2]=l}while(--a)}while(--n)}},1863:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1455),n=r(7939),o=r(3774);e.Threshold=function(t){var e,r=255*this.threshold(),i=t.data,n=i.length;for(e=0;e<n;e+=1)i[e]=i[e]<r?0:255},i.Factory.addGetterSetter(n.Node,"threshold",.5,o.getNumberValidator(),i.Factory.afterSetFilter)},185:(t,e,r)=>{var i=r(2076).S;i._injectGlobal(i),e.default=i,t.exports=e.default},119:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(4417),c=r(3774),l=r(4417),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(t){var e=h.Konva.getAngle(this.angle()),r=this.clockwise();t.beginPath(),t.arc(0,0,this.outerRadius(),0,e,r),t.arc(0,0,this.innerRadius(),e,0,!r),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.outerRadius()},e.prototype.getHeight=function(){return 2*this.outerRadius()},e.prototype.setWidth=function(t){this.outerRadius(t/2)},e.prototype.setHeight=function(t){this.outerRadius(t/2)},e}(s.Shape);e.Arc=d,d.prototype._centroid=!0,d.prototype.className="Arc",d.prototype._attrsAffectingSize=["innerRadius","outerRadius"],l._registerNode(d),a.Factory.addGetterSetter(d,"innerRadius",0,c.getNumberValidator()),a.Factory.addGetterSetter(d,"outerRadius",0,c.getNumberValidator()),a.Factory.addGetterSetter(d,"angle",0,c.getNumberValidator()),a.Factory.addGetterSetter(d,"clockwise",!1,c.getBooleanValidator()),o.Collection.mapMethods(d)},2064:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7149),h=r(3774),c=r(4417),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(e){t.prototype._sceneFunc.call(this,e);var r=2*Math.PI,i=this.points(),n=i,o=0!==this.tension()&&i.length>4;o&&(n=this.getTensionPoints());var a,s,h=i.length;o?(a=i[h-2]-(n[n.length-2]+n[n.length-4])/2,s=i[h-1]-(n[n.length-1]+n[n.length-3])/2):(a=i[h-2]-i[h-4],s=i[h-1]-i[h-3]);var c=(Math.atan2(s,a)+r)%r,l=this.pointerLength(),d=this.pointerWidth();e.save(),e.beginPath(),e.translate(i[h-2],i[h-1]),e.rotate(c),e.moveTo(0,0),e.lineTo(-l,d/2),e.lineTo(-l,-d/2),e.closePath(),e.restore(),this.pointerAtBeginning()&&(e.save(),e.translate(i[0],i[1]),o?(a=(n[0]+n[2])/2-i[0],s=(n[1]+n[3])/2-i[1]):(a=i[2]-i[0],s=i[3]-i[1]),e.rotate((Math.atan2(-s,-a)+r)%r),e.moveTo(0,0),e.lineTo(-l,d/2),e.lineTo(-l,-d/2),e.closePath(),e.restore());var u=this.dashEnabled();u&&(this.attrs.dashEnabled=!1,e.setLineDash([])),e.fillStrokeShape(this),u&&(this.attrs.dashEnabled=!0)},e.prototype.getSelfRect=function(){var e=t.prototype.getSelfRect.call(this),r=this.pointerWidth()/2;return{x:e.x-r,y:e.y-r,width:e.width+2*r,height:e.height+2*r}},e}(s.Line);e.Arrow=l,l.prototype.className="Arrow",c._registerNode(l),a.Factory.addGetterSetter(l,"pointerLength",10,h.getNumberValidator()),a.Factory.addGetterSetter(l,"pointerWidth",10,h.getNumberValidator()),a.Factory.addGetterSetter(l,"pointerAtBeginning",!1),o.Collection.mapMethods(l)},7643:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(3774),c=r(4417),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(t){t.beginPath(),t.arc(0,0,this.attrs.radius||0,0,2*Math.PI,!1),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radius()},e.prototype.getHeight=function(){return 2*this.radius()},e.prototype.setWidth=function(t){this.radius()!==t/2&&this.radius(t/2)},e.prototype.setHeight=function(t){this.radius()!==t/2&&this.radius(t/2)},e}(s.Shape);e.Circle=l,l.prototype._centroid=!0,l.prototype.className="Circle",l.prototype._attrsAffectingSize=["radius"],c._registerNode(l),a.Factory.addGetterSetter(l,"radius",0,h.getNumberValidator()),o.Collection.mapMethods(l)},535:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(3774),c=r(4417),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(t){var e=this.radiusX(),r=this.radiusY();t.beginPath(),t.save(),e!==r&&t.scale(1,r/e),t.arc(0,0,e,0,2*Math.PI,!1),t.restore(),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radiusX()},e.prototype.getHeight=function(){return 2*this.radiusY()},e.prototype.setWidth=function(t){this.radiusX(t/2)},e.prototype.setHeight=function(t){this.radiusY(t/2)},e}(s.Shape);e.Ellipse=l,l.prototype.className="Ellipse",l.prototype._centroid=!0,l.prototype._attrsAffectingSize=["radiusX","radiusY"],c._registerNode(l),a.Factory.addComponentsGetterSetter(l,"radius",["x","y"]),a.Factory.addGetterSetter(l,"radiusX",0,h.getNumberValidator()),a.Factory.addGetterSetter(l,"radiusY",0,h.getNumberValidator()),o.Collection.mapMethods(l)},1298:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(3774),c=r(4417),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._useBufferCanvas=function(){return t.prototype._useBufferCanvas.call(this,!0)},e.prototype._sceneFunc=function(t){var e,r=this.getWidth(),i=this.getHeight(),n=this.attrs.image;if(n){var o=this.attrs.cropWidth,a=this.attrs.cropHeight;e=o&&a?[n,this.cropX(),this.cropY(),o,a,0,0,r,i]:[n,0,0,r,i]}(this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,r,i),t.closePath(),t.fillStrokeShape(this)),n&&t.drawImage.apply(t,e)},e.prototype._hitFunc=function(t){var e=this.width(),r=this.height();t.beginPath(),t.rect(0,0,e,r),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){var t,e;return null!==(t=this.attrs.width)&&void 0!==t?t:(null===(e=this.image())||void 0===e?void 0:e.width)||0},e.prototype.getHeight=function(){var t,e;return null!==(t=this.attrs.height)&&void 0!==t?t:(null===(e=this.image())||void 0===e?void 0:e.height)||0},e.fromURL=function(t,r){var i=o.Util.createImageElement();i.onload=function(){var t=new e({image:i});r(t)},i.crossOrigin="Anonymous",i.src=t},e}(s.Shape);e.Image=l,l.prototype.className="Image",c._registerNode(l),a.Factory.addGetterSetter(l,"image"),a.Factory.addComponentsGetterSetter(l,"crop",["x","y","width","height"]),a.Factory.addGetterSetter(l,"cropX",0,h.getNumberValidator()),a.Factory.addGetterSetter(l,"cropY",0,h.getNumberValidator()),a.Factory.addGetterSetter(l,"cropWidth",0,h.getNumberValidator()),a.Factory.addGetterSetter(l,"cropHeight",0,h.getNumberValidator()),o.Collection.mapMethods(l)},6067:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(8985),c=r(3774),l=r(4417),d=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width"],u="up",p="right",f="down",g="left",y=d.length,v=function(t){function e(e){var r=t.call(this,e)||this;return r.on("add.konva",(function(t){this._addListeners(t.child),this._sync()})),r}return n(e,t),e.prototype.getText=function(){return this.find("Text")[0]},e.prototype.getTag=function(){return this.find("Tag")[0]},e.prototype._addListeners=function(t){var e,r=this,i=function(){r._sync()};for(e=0;e<y;e++)t.on(d[e]+"Change.konva",i)},e.prototype.getWidth=function(){return this.getText().width()},e.prototype.getHeight=function(){return this.getText().height()},e.prototype._sync=function(){var t,e,r,i,n,o,a,s=this.getText(),h=this.getTag();if(s&&h){switch(t=s.width(),e=s.height(),r=h.pointerDirection(),i=h.pointerWidth(),a=h.pointerHeight(),n=0,o=0,r){case u:n=t/2,o=-1*a;break;case p:n=t+i,o=e/2;break;case f:n=t/2,o=e+a;break;case g:n=-1*i,o=e/2}h.setAttrs({x:-1*n,y:-1*o,width:t,height:e}),s.setAttrs({x:-1*n,y:-1*o})}},e}(h.Group);e.Label=v,v.prototype.className="Label",l._registerNode(v),o.Collection.mapMethods(v);var _=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(t){var e=this.width(),r=this.height(),i=this.pointerDirection(),n=this.pointerWidth(),o=this.pointerHeight(),a=this.cornerRadius(),s=0,h=0,c=0,l=0;"number"==typeof a?s=h=c=l=Math.min(a,e/2,r/2):(s=Math.min(a[0]||0,e/2,r/2),h=Math.min(a[1]||0,e/2,r/2),l=Math.min(a[2]||0,e/2,r/2),c=Math.min(a[3]||0,e/2,r/2)),t.beginPath(),t.moveTo(s,0),i===u&&(t.lineTo((e-n)/2,0),t.lineTo(e/2,-1*o),t.lineTo((e+n)/2,0)),t.lineTo(e-h,0),t.arc(e-h,h,h,3*Math.PI/2,0,!1),i===p&&(t.lineTo(e,(r-o)/2),t.lineTo(e+n,r/2),t.lineTo(e,(r+o)/2)),t.lineTo(e,r-l),t.arc(e-l,r-l,l,0,Math.PI/2,!1),i===f&&(t.lineTo((e+n)/2,r),t.lineTo(e/2,r+o),t.lineTo((e-n)/2,r)),t.lineTo(c,r),t.arc(c,r-c,c,Math.PI/2,Math.PI,!1),i===g&&(t.lineTo(0,(r+o)/2),t.lineTo(-1*n,r/2),t.lineTo(0,(r-o)/2)),t.lineTo(0,s),t.arc(s,s,s,Math.PI,3*Math.PI/2,!1),t.closePath(),t.fillStrokeShape(this)},e.prototype.getSelfRect=function(){var t=0,e=0,r=this.pointerWidth(),i=this.pointerHeight(),n=this.pointerDirection(),o=this.width(),a=this.height();return n===u?(e-=i,a+=i):n===f?a+=i:n===g?(t-=1.5*r,o+=r):n===p&&(o+=1.5*r),{x:t,y:e,width:o,height:a}},e}(s.Shape);e.Tag=_,_.prototype.className="Tag",l._registerNode(_),a.Factory.addGetterSetter(_,"pointerDirection","none"),a.Factory.addGetterSetter(_,"pointerWidth",0,c.getNumberValidator()),a.Factory.addGetterSetter(_,"pointerHeight",0,c.getNumberValidator()),a.Factory.addGetterSetter(_,"cornerRadius",0,c.getNumberOrArrayOfNumbersValidator(4)),o.Collection.mapMethods(_)},7149:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var i=Array(t),n=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,n++)i[n]=o[a];return i};Object.defineProperty(e,"__esModule",{value:!0});var a=r(8588),s=r(1455),h=r(7955),c=r(3774),l=r(4417),d=function(t){function e(e){var r=t.call(this,e)||this;return r.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",(function(){this._clearCache("tensionPoints")})),r}return n(e,t),e.prototype._sceneFunc=function(t){var e,r,i,n=this.points(),o=n.length,a=this.tension(),s=this.closed(),h=this.bezier();if(o){if(t.beginPath(),t.moveTo(n[0],n[1]),0!==a&&o>4){for(r=(e=this.getTensionPoints()).length,i=s?0:4,s||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);i<r-2;)t.bezierCurveTo(e[i++],e[i++],e[i++],e[i++],e[i++],e[i++]);s||t.quadraticCurveTo(e[r-2],e[r-1],n[o-2],n[o-1])}else if(h)for(i=2;i<o;)t.bezierCurveTo(n[i++],n[i++],n[i++],n[i++],n[i++],n[i++]);else for(i=2;i<o;i+=2)t.lineTo(n[i],n[i+1]);s?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}},e.prototype.getTensionPoints=function(){return this._getCache("tensionPoints",this._getTensionPoints)},e.prototype._getTensionPoints=function(){return this.closed()?this._getTensionPointsClosed():a.Util._expandPoints(this.points(),this.tension())},e.prototype._getTensionPointsClosed=function(){var t=this.points(),e=t.length,r=this.tension(),i=a.Util._getControlPoints(t[e-2],t[e-1],t[0],t[1],t[2],t[3],r),n=a.Util._getControlPoints(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],r),o=a.Util._expandPoints(t,r);return[i[2],i[3]].concat(o).concat([n[0],n[1],t[e-2],t[e-1],n[2],n[3],i[0],i[1],t[0],t[1]])},e.prototype.getWidth=function(){return this.getSelfRect().width},e.prototype.getHeight=function(){return this.getSelfRect().height},e.prototype.getSelfRect=function(){var t=this.points();if(t.length<4)return{x:t[0]||0,y:t[1]||0,width:0,height:0};for(var e,r,i=(t=0!==this.tension()?o([t[0],t[1]],this._getTensionPoints(),[t[t.length-2],t[t.length-1]]):this.points())[0],n=t[0],a=t[1],s=t[1],h=0;h<t.length/2;h++)e=t[2*h],r=t[2*h+1],i=Math.min(i,e),n=Math.max(n,e),a=Math.min(a,r),s=Math.max(s,r);return{x:i,y:a,width:n-i,height:s-a}},e}(h.Shape);e.Line=d,d.prototype.className="Line",d.prototype._attrsAffectingSize=["points","bezier","tension"],l._registerNode(d),s.Factory.addGetterSetter(d,"closed",!1),s.Factory.addGetterSetter(d,"bezier",!1),s.Factory.addGetterSetter(d,"tension",0,c.getNumberValidator()),s.Factory.addGetterSetter(d,"points",[],c.getNumberArrayValidator()),a.Collection.mapMethods(d)},7339:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(4417),c=function(t){function e(r){var i=t.call(this,r)||this;i.dataArray=[],i.pathLength=0,i.dataArray=e.parsePathData(i.data()),i.pathLength=0;for(var n=0;n<i.dataArray.length;++n)i.pathLength+=i.dataArray[n].pathLength;return i.on("dataChange.konva",(function(){this.dataArray=e.parsePathData(this.data()),this.pathLength=0;for(var t=0;t<this.dataArray.length;++t)this.pathLength+=this.dataArray[t].pathLength})),i}return n(e,t),e.prototype._sceneFunc=function(t){var e=this.dataArray;t.beginPath();for(var r=!1,i=0;i<e.length;i++){var n=e[i].command,o=e[i].points;switch(n){case"L":t.lineTo(o[0],o[1]);break;case"M":t.moveTo(o[0],o[1]);break;case"C":t.bezierCurveTo(o[0],o[1],o[2],o[3],o[4],o[5]);break;case"Q":t.quadraticCurveTo(o[0],o[1],o[2],o[3]);break;case"A":var a=o[0],s=o[1],h=o[2],c=o[3],l=o[4],d=o[5],u=o[6],p=o[7],f=h>c?h:c,g=h>c?1:h/c,y=h>c?c/h:1;t.translate(a,s),t.rotate(u),t.scale(g,y),t.arc(0,0,f,l,l+d,1-p),t.scale(1/g,1/y),t.rotate(-u),t.translate(-a,-s);break;case"z":r=!0,t.closePath()}}r||this.hasFill()?t.fillStrokeShape(this):t.strokeShape(this)},e.prototype.getSelfRect=function(){var t=[];this.dataArray.forEach((function(r){if("A"===r.command){var i=r.points[4],n=r.points[5],o=r.points[4]+n,a=Math.PI/180;if(Math.abs(i-o)<a&&(a=Math.abs(i-o)),n<0)for(var s=i-a;s>o;s-=a){var h=e.getPointOnEllipticalArc(r.points[0],r.points[1],r.points[2],r.points[3],s,0);t.push(h.x,h.y)}else for(s=i+a;s<o;s+=a)h=e.getPointOnEllipticalArc(r.points[0],r.points[1],r.points[2],r.points[3],s,0),t.push(h.x,h.y)}else if("C"===r.command)for(s=0;s<=1;s+=.01)h=e.getPointOnCubicBezier(s,r.start.x,r.start.y,r.points[0],r.points[1],r.points[2],r.points[3],r.points[4],r.points[5]),t.push(h.x,h.y);else t=t.concat(r.points)}));for(var r,i,n=t[0],o=t[0],a=t[1],s=t[1],h=0;h<t.length/2;h++)r=t[2*h],i=t[2*h+1],isNaN(r)||(n=Math.min(n,r),o=Math.max(o,r)),isNaN(i)||(a=Math.min(a,i),s=Math.max(s,i));return{x:Math.round(n),y:Math.round(a),width:Math.round(o-n),height:Math.round(s-a)}},e.prototype.getLength=function(){return this.pathLength},e.prototype.getPointAtLength=function(t){var r,i=0,n=this.dataArray.length;if(!n)return null;for(;i<n&&t>this.dataArray[i].pathLength;)t-=this.dataArray[i].pathLength,++i;if(i===n)return{x:(r=this.dataArray[i-1].points.slice(-2))[0],y:r[1]};if(t<.01)return{x:(r=this.dataArray[i].points.slice(0,2))[0],y:r[1]};var o=this.dataArray[i],a=o.points;switch(o.command){case"L":return e.getPointOnLine(t,o.start.x,o.start.y,a[0],a[1]);case"C":return e.getPointOnCubicBezier(t/o.pathLength,o.start.x,o.start.y,a[0],a[1],a[2],a[3],a[4],a[5]);case"Q":return e.getPointOnQuadraticBezier(t/o.pathLength,o.start.x,o.start.y,a[0],a[1],a[2],a[3]);case"A":var s=a[0],h=a[1],c=a[2],l=a[3],d=a[4],u=a[5],p=a[6];return d+=u*t/o.pathLength,e.getPointOnEllipticalArc(s,h,c,l,d,p)}return null},e.getLineLength=function(t,e,r,i){return Math.sqrt((r-t)*(r-t)+(i-e)*(i-e))},e.getPointOnLine=function(t,e,r,i,n,o,a){void 0===o&&(o=e),void 0===a&&(a=r);var s=(n-r)/(i-e+1e-8),h=Math.sqrt(t*t/(1+s*s));i<e&&(h*=-1);var c,l=s*h;if(i===e)c={x:o,y:a+l};else if((a-r)/(o-e+1e-8)===s)c={x:o+h,y:a+l};else{var d,u,p=this.getLineLength(e,r,i,n),f=(o-e)*(i-e)+(a-r)*(n-r);d=e+(f/=p*p)*(i-e),u=r+f*(n-r);var g=this.getLineLength(o,a,d,u),y=Math.sqrt(t*t-g*g);h=Math.sqrt(y*y/(1+s*s)),i<e&&(h*=-1),c={x:d+h,y:u+(l=s*h)}}return c},e.getPointOnCubicBezier=function(t,e,r,i,n,o,a,s,h){function c(t){return t*t*t}function l(t){return 3*t*t*(1-t)}function d(t){return 3*t*(1-t)*(1-t)}function u(t){return(1-t)*(1-t)*(1-t)}return{x:s*c(t)+o*l(t)+i*d(t)+e*u(t),y:h*c(t)+a*l(t)+n*d(t)+r*u(t)}},e.getPointOnQuadraticBezier=function(t,e,r,i,n,o,a){function s(t){return t*t}function h(t){return 2*t*(1-t)}function c(t){return(1-t)*(1-t)}return{x:o*s(t)+i*h(t)+e*c(t),y:a*s(t)+n*h(t)+r*c(t)}},e.getPointOnEllipticalArc=function(t,e,r,i,n,o){var a=Math.cos(o),s=Math.sin(o),h=r*Math.cos(n),c=i*Math.sin(n);return{x:t+(h*a-c*s),y:e+(h*s+c*a)}},e.parsePathData=function(t){if(!t)return[];var e=t,r=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var i=0;i<r.length;i++)e=e.replace(new RegExp(r[i],"g"),"|"+r[i]);var n,o=e.split("|"),a=[],s=[],h=0,c=0,l=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(i=1;i<o.length;i++){var d=o[i],u=d.charAt(0);for(d=d.slice(1),s.length=0;n=l.exec(d);)s.push(n[0]);for(var p=[],f=0,g=s.length;f<g;f++){var y=parseFloat(s[f]);isNaN(y)?p.push(0):p.push(y)}for(;p.length>0&&!isNaN(p[0]);){var v,_,m,b,x,S,w,C,P,T,k=null,A=[],O=h,M=c;switch(u){case"l":h+=p.shift(),c+=p.shift(),k="L",A.push(h,c);break;case"L":h=p.shift(),c=p.shift(),A.push(h,c);break;case"m":var F=p.shift(),E=p.shift();if(h+=F,c+=E,k="M",a.length>2&&"z"===a[a.length-1].command)for(var N=a.length-2;N>=0;N--)if("M"===a[N].command){h=a[N].points[0]+F,c=a[N].points[1]+E;break}A.push(h,c),u="l";break;case"M":h=p.shift(),c=p.shift(),k="M",A.push(h,c),u="L";break;case"h":h+=p.shift(),k="L",A.push(h,c);break;case"H":h=p.shift(),k="L",A.push(h,c);break;case"v":c+=p.shift(),k="L",A.push(h,c);break;case"V":c=p.shift(),k="L",A.push(h,c);break;case"C":A.push(p.shift(),p.shift(),p.shift(),p.shift()),h=p.shift(),c=p.shift(),A.push(h,c);break;case"c":A.push(h+p.shift(),c+p.shift(),h+p.shift(),c+p.shift()),h+=p.shift(),c+=p.shift(),k="C",A.push(h,c);break;case"S":_=h,m=c,"C"===(v=a[a.length-1]).command&&(_=h+(h-v.points[2]),m=c+(c-v.points[3])),A.push(_,m,p.shift(),p.shift()),h=p.shift(),c=p.shift(),k="C",A.push(h,c);break;case"s":_=h,m=c,"C"===(v=a[a.length-1]).command&&(_=h+(h-v.points[2]),m=c+(c-v.points[3])),A.push(_,m,h+p.shift(),c+p.shift()),h+=p.shift(),c+=p.shift(),k="C",A.push(h,c);break;case"Q":A.push(p.shift(),p.shift()),h=p.shift(),c=p.shift(),A.push(h,c);break;case"q":A.push(h+p.shift(),c+p.shift()),h+=p.shift(),c+=p.shift(),k="Q",A.push(h,c);break;case"T":_=h,m=c,"Q"===(v=a[a.length-1]).command&&(_=h+(h-v.points[0]),m=c+(c-v.points[1])),h=p.shift(),c=p.shift(),k="Q",A.push(_,m,h,c);break;case"t":_=h,m=c,"Q"===(v=a[a.length-1]).command&&(_=h+(h-v.points[0]),m=c+(c-v.points[1])),h+=p.shift(),c+=p.shift(),k="Q",A.push(_,m,h,c);break;case"A":b=p.shift(),x=p.shift(),S=p.shift(),w=p.shift(),C=p.shift(),P=h,T=c,h=p.shift(),c=p.shift(),k="A",A=this.convertEndpointToCenterParameterization(P,T,h,c,w,C,b,x,S);break;case"a":b=p.shift(),x=p.shift(),S=p.shift(),w=p.shift(),C=p.shift(),P=h,T=c,h+=p.shift(),c+=p.shift(),k="A",A=this.convertEndpointToCenterParameterization(P,T,h,c,w,C,b,x,S)}a.push({command:k||u,points:A,start:{x:O,y:M},pathLength:this.calcLength(O,M,k||u,A)})}"z"!==u&&"Z"!==u||a.push({command:"z",points:[],start:void 0,pathLength:0})}return a},e.calcLength=function(t,r,i,n){var o,a,s,h,c=e;switch(i){case"L":return c.getLineLength(t,r,n[0],n[1]);case"C":for(o=0,a=c.getPointOnCubicBezier(0,t,r,n[0],n[1],n[2],n[3],n[4],n[5]),h=.01;h<=1;h+=.01)s=c.getPointOnCubicBezier(h,t,r,n[0],n[1],n[2],n[3],n[4],n[5]),o+=c.getLineLength(a.x,a.y,s.x,s.y),a=s;return o;case"Q":for(o=0,a=c.getPointOnQuadraticBezier(0,t,r,n[0],n[1],n[2],n[3]),h=.01;h<=1;h+=.01)s=c.getPointOnQuadraticBezier(h,t,r,n[0],n[1],n[2],n[3]),o+=c.getLineLength(a.x,a.y,s.x,s.y),a=s;return o;case"A":o=0;var l=n[4],d=n[5],u=n[4]+d,p=Math.PI/180;if(Math.abs(l-u)<p&&(p=Math.abs(l-u)),a=c.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],l,0),d<0)for(h=l-p;h>u;h-=p)s=c.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],h,0),o+=c.getLineLength(a.x,a.y,s.x,s.y),a=s;else for(h=l+p;h<u;h+=p)s=c.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],h,0),o+=c.getLineLength(a.x,a.y,s.x,s.y),a=s;return s=c.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],u,0),o+c.getLineLength(a.x,a.y,s.x,s.y)}return 0},e.convertEndpointToCenterParameterization=function(t,e,r,i,n,o,a,s,h){var c=h*(Math.PI/180),l=Math.cos(c)*(t-r)/2+Math.sin(c)*(e-i)/2,d=-1*Math.sin(c)*(t-r)/2+Math.cos(c)*(e-i)/2,u=l*l/(a*a)+d*d/(s*s);u>1&&(a*=Math.sqrt(u),s*=Math.sqrt(u));var p=Math.sqrt((a*a*(s*s)-a*a*(d*d)-s*s*(l*l))/(a*a*(d*d)+s*s*(l*l)));n===o&&(p*=-1),isNaN(p)&&(p=0);var f=p*a*d/s,g=p*-s*l/a,y=(t+r)/2+Math.cos(c)*f-Math.sin(c)*g,v=(e+i)/2+Math.sin(c)*f+Math.cos(c)*g,_=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},m=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(_(t)*_(e))},b=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(m(t,e))},x=b([1,0],[(l-f)/a,(d-g)/s]),S=[(l-f)/a,(d-g)/s],w=[(-1*l-f)/a,(-1*d-g)/s],C=b(S,w);return m(S,w)<=-1&&(C=Math.PI),m(S,w)>=1&&(C=0),0===o&&C>0&&(C-=2*Math.PI),1===o&&C<0&&(C+=2*Math.PI),[y,v,a,s,x,C,c,o]},e}(s.Shape);e.Path=c,c.prototype.className="Path",c.prototype._attrsAffectingSize=["data"],h._registerNode(c),a.Factory.addGetterSetter(c,"data"),o.Collection.mapMethods(c)},5244:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(4417),c=r(3774),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(t){var e=this.cornerRadius(),r=this.width(),i=this.height();if(t.beginPath(),e){var n=0,o=0,a=0,s=0;"number"==typeof e?n=o=a=s=Math.min(e,r/2,i/2):(n=Math.min(e[0]||0,r/2,i/2),o=Math.min(e[1]||0,r/2,i/2),s=Math.min(e[2]||0,r/2,i/2),a=Math.min(e[3]||0,r/2,i/2)),t.moveTo(n,0),t.lineTo(r-o,0),t.arc(r-o,o,o,3*Math.PI/2,0,!1),t.lineTo(r,i-s),t.arc(r-s,i-s,s,0,Math.PI/2,!1),t.lineTo(a,i),t.arc(a,i-a,a,Math.PI/2,Math.PI,!1),t.lineTo(0,n),t.arc(n,n,n,Math.PI,3*Math.PI/2,!1)}else t.rect(0,0,r,i);t.closePath(),t.fillStrokeShape(this)},e}(s.Shape);e.Rect=l,l.prototype.className="Rect",h._registerNode(l),a.Factory.addGetterSetter(l,"cornerRadius",0,c.getNumberOrArrayOfNumbersValidator(4)),o.Collection.mapMethods(l)},1785:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(3774),c=r(4417),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(t){var e=this._getPoints();t.beginPath(),t.moveTo(e[0].x,e[0].y);for(var r=1;r<e.length;r++)t.lineTo(e[r].x,e[r].y);t.closePath(),t.fillStrokeShape(this)},e.prototype._getPoints=function(){for(var t=this.attrs.sides,e=this.attrs.radius||0,r=[],i=0;i<t;i++)r.push({x:e*Math.sin(2*i*Math.PI/t),y:-1*e*Math.cos(2*i*Math.PI/t)});return r},e.prototype.getSelfRect=function(){var t=this._getPoints(),e=t[0].x,r=t[0].y,i=t[0].x,n=t[0].y;return t.forEach((function(t){e=Math.min(e,t.x),r=Math.max(r,t.x),i=Math.min(i,t.y),n=Math.max(n,t.y)})),{x:e,y:i,width:r-e,height:n-i}},e.prototype.getWidth=function(){return 2*this.radius()},e.prototype.getHeight=function(){return 2*this.radius()},e.prototype.setWidth=function(t){this.radius(t/2)},e.prototype.setHeight=function(t){this.radius(t/2)},e}(s.Shape);e.RegularPolygon=l,l.prototype.className="RegularPolygon",l.prototype._centroid=!0,l.prototype._attrsAffectingSize=["radius"],c._registerNode(l),a.Factory.addGetterSetter(l,"radius",0,h.getNumberValidator()),a.Factory.addGetterSetter(l,"sides",0,h.getNumberValidator()),o.Collection.mapMethods(l)},657:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(3774),c=r(4417),l=2*Math.PI,d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(t){t.beginPath(),t.arc(0,0,this.innerRadius(),0,l,!1),t.moveTo(this.outerRadius(),0),t.arc(0,0,this.outerRadius(),l,0,!0),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.outerRadius()},e.prototype.getHeight=function(){return 2*this.outerRadius()},e.prototype.setWidth=function(t){this.outerRadius(t/2)},e.prototype.setHeight=function(t){this.outerRadius(t/2)},e}(s.Shape);e.Ring=d,d.prototype.className="Ring",d.prototype._centroid=!0,d.prototype._attrsAffectingSize=["innerRadius","outerRadius"],c._registerNode(d),a.Factory.addGetterSetter(d,"innerRadius",0,h.getNumberValidator()),a.Factory.addGetterSetter(d,"outerRadius",0,h.getNumberValidator()),o.Collection.mapMethods(d)},8986:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(6745),c=r(3774),l=r(4417),d=function(t){function e(e){var r=t.call(this,e)||this;return r._updated=!0,r.anim=new h.Animation((function(){var t=r._updated;return r._updated=!1,t})),r.on("animationChange.konva",(function(){this.frameIndex(0)})),r.on("frameIndexChange.konva",(function(){this._updated=!0})),r.on("frameRateChange.konva",(function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())})),r}return n(e,t),e.prototype._sceneFunc=function(t){var e=this.animation(),r=this.frameIndex(),i=4*r,n=this.animations()[e],o=this.frameOffsets(),a=n[i+0],s=n[i+1],h=n[i+2],c=n[i+3],l=this.image();if((this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,h,c),t.closePath(),t.fillStrokeShape(this)),l)if(o){var d=o[e],u=2*r;t.drawImage(l,a,s,h,c,d[u+0],d[u+1],h,c)}else t.drawImage(l,a,s,h,c,0,0,h,c)},e.prototype._hitFunc=function(t){var e=this.animation(),r=this.frameIndex(),i=4*r,n=this.animations()[e],o=this.frameOffsets(),a=n[i+2],s=n[i+3];if(t.beginPath(),o){var h=o[e],c=2*r;t.rect(h[c+0],h[c+1],a,s)}else t.rect(0,0,a,s);t.closePath(),t.fillShape(this)},e.prototype._useBufferCanvas=function(){return t.prototype._useBufferCanvas.call(this,!0)},e.prototype._setInterval=function(){var t=this;this.interval=setInterval((function(){t._updateIndex()}),1e3/this.frameRate())},e.prototype.start=function(){if(!this.isRunning()){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()}},e.prototype.stop=function(){this.anim.stop(),clearInterval(this.interval)},e.prototype.isRunning=function(){return this.anim.isRunning()},e.prototype._updateIndex=function(){var t=this.frameIndex(),e=this.animation();t<this.animations()[e].length/4-1?this.frameIndex(t+1):this.frameIndex(0)},e}(s.Shape);e.Sprite=d,d.prototype.className="Sprite",l._registerNode(d),a.Factory.addGetterSetter(d,"animation"),a.Factory.addGetterSetter(d,"animations"),a.Factory.addGetterSetter(d,"frameOffsets"),a.Factory.addGetterSetter(d,"image"),a.Factory.addGetterSetter(d,"frameIndex",0,c.getNumberValidator()),a.Factory.addGetterSetter(d,"frameRate",17,c.getNumberValidator()),a.Factory.backCompat(d,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),o.Collection.mapMethods(d)},1964:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(3774),c=r(4417),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(t){var e=this.innerRadius(),r=this.outerRadius(),i=this.numPoints();t.beginPath(),t.moveTo(0,0-r);for(var n=1;n<2*i;n++){var o=n%2==0?r:e,a=o*Math.sin(n*Math.PI/i),s=-1*o*Math.cos(n*Math.PI/i);t.lineTo(a,s)}t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.outerRadius()},e.prototype.getHeight=function(){return 2*this.outerRadius()},e.prototype.setWidth=function(t){this.outerRadius(t/2)},e.prototype.setHeight=function(t){this.outerRadius(t/2)},e}(s.Shape);e.Star=l,l.prototype.className="Star",l.prototype._centroid=!0,l.prototype._attrsAffectingSize=["innerRadius","outerRadius"],c._registerNode(l),a.Factory.addGetterSetter(l,"numPoints",5,h.getNumberValidator()),a.Factory.addGetterSetter(l,"innerRadius",0,h.getNumberValidator()),a.Factory.addGetterSetter(l,"outerRadius",0,h.getNumberValidator()),o.Collection.mapMethods(l)},3787:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(4417),c=r(3774),l=r(4417);function d(t){return Array.from(t)}e.stringToArray=d;var u,p="auto",f="justify",g="left",y="middle",v="normal",_=" ",m="…",b=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],x=b.length;function S(){return u||(u=o.Util.createCanvasElement().getContext("2d"))}var w=function(t){function e(e){var r=t.call(this,function(t){return(t=t||{}).fillLinearGradientColorStops||t.fillRadialGradientColorStops||t.fillPatternImage||(t.fill=t.fill||"black"),t}(e))||this;r._partialTextX=0,r._partialTextY=0;for(var i=0;i<x;i++)r.on(b[i]+"Change.konva",r._setTextData);return r._setTextData(),r}return n(e,t),e.prototype._sceneFunc=function(t){var e=this.textArr,r=e.length;if(this.text()){var i,n=this.padding(),o=this.fontSize(),a=this.lineHeight()*o,s=this.verticalAlign(),h=0,c=this.align(),l=this.getWidth(),u=this.letterSpacing(),p=this.fill(),v=this.textDecoration(),_=-1!==v.indexOf("underline"),m=-1!==v.indexOf("line-through"),b=0,x=(b=a/2,0),S=0;for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",y),t.setAttr("textAlign",g),s===y?h=(this.getHeight()-r*a-2*n)/2:"bottom"===s&&(h=this.getHeight()-r*a-2*n),t.translate(n,h+n),i=0;i<r;i++){x=0,S=0;var w,C,P,T=e[i],k=T.text,A=T.width,O=i!==r-1;if(t.save(),"right"===c?x+=l-A-2*n:"center"===c&&(x+=(l-A-2*n)/2),_&&(t.save(),t.beginPath(),t.moveTo(x,b+S+Math.round(o/2)),C=0==(w=k.split(" ").length-1),P=c===f&&O&&!C?l-2*n:A,t.lineTo(x+Math.round(P),b+S+Math.round(o/2)),t.lineWidth=o/15,t.strokeStyle=p,t.stroke(),t.restore()),m&&(t.save(),t.beginPath(),t.moveTo(x,b+S),C=0==(w=k.split(" ").length-1),P=c===f&&O&&!C?l-2*n:A,t.lineTo(x+Math.round(P),b+S),t.lineWidth=o/15,t.strokeStyle=p,t.stroke(),t.restore()),0!==u||c===f){w=k.split(" ").length-1;for(var M=d(k),F=0;F<M.length;F++){var E=M[F];" "===E&&i!==r-1&&c===f&&(x+=(l-2*n-A)/w),this._partialTextX=x,this._partialTextY=b+S,this._partialText=E,t.fillStrokeShape(this),x+=this.measureSize(E).width+u}}else this._partialTextX=x,this._partialTextY=b+S,this._partialText=k,t.fillStrokeShape(this);t.restore(),r>1&&(b+=a)}}},e.prototype._hitFunc=function(t){var e=this.getWidth(),r=this.getHeight();t.beginPath(),t.rect(0,0,e,r),t.closePath(),t.fillStrokeShape(this)},e.prototype.setText=function(t){var e=o.Util._isString(t)?t:null==t?"":t+"";return this._setAttr("text",e),this},e.prototype.getWidth=function(){return this.attrs.width===p||void 0===this.attrs.width?this.getTextWidth()+2*this.padding():this.attrs.width},e.prototype.getHeight=function(){return this.attrs.height===p||void 0===this.attrs.height?this.fontSize()*this.textArr.length*this.lineHeight()+2*this.padding():this.attrs.height},e.prototype.getTextWidth=function(){return this.textWidth},e.prototype.getTextHeight=function(){return o.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},e.prototype.measureSize=function(t){var e,r=S(),i=this.fontSize();return r.save(),r.font=this._getContextFont(),e=r.measureText(t),r.restore(),{width:e.width,height:i}},e.prototype._getContextFont=function(){return h.Konva.UA.isIE?this.fontStyle()+_+this.fontSize()+"px "+this.fontFamily():this.fontStyle()+_+this.fontVariant()+_+(this.fontSize()+"px ")+this.fontFamily().split(",").map((function(t){var e=(t=t.trim()).indexOf(" ")>=0,r=t.indexOf('"')>=0||t.indexOf("'")>=0;return e&&!r&&(t='"'+t+'"'),t})).join(", ")},e.prototype._addTextLine=function(t){this.align()===f&&(t=t.trim());var e=this._getTextWidth(t);return this.textArr.push({text:t,width:e})},e.prototype._getTextWidth=function(t){var e=this.letterSpacing(),r=t.length;return S().measureText(t).width+(r?e*(r-1):0)},e.prototype._setTextData=function(){var t=this.text().split("\n"),e=+this.fontSize(),r=0,i=this.lineHeight()*e,n=this.attrs.width,o=this.attrs.height,a=n!==p&&void 0!==n,s=o!==p&&void 0!==o,h=this.padding(),c=n-2*h,l=o-2*h,d=0,u=this.wrap(),f="none"!==u,g="char"!==u&&f,y=this.ellipsis();this.textArr=[],S().font=this._getContextFont();for(var v=y?this._getTextWidth(m):0,b=0,x=t.length;b<x;++b){var w=t[b],C=this._getTextWidth(w);if(a&&C>c)for(;w.length>0;){for(var P=0,T=w.length,k="",A=0;P<T;){var O=P+T>>>1,M=w.slice(0,O+1),F=this._getTextWidth(M)+v;F<=c?(P=O+1,k=M+(y?m:""),A=F):T=O}if(!k)break;if(g){var E,N=w[k.length];(E=(N===_||"-"===N)&&A<=c?k.length:Math.max(k.lastIndexOf(_),k.lastIndexOf("-"))+1)>0&&(P=E,k=k.slice(0,P),A=this._getTextWidth(k))}if(k=k.trimRight(),this._addTextLine(k),r=Math.max(r,A),d+=i,!f||s&&d+i>l){var G=this.textArr[this.textArr.length-1];G&&y&&(this._getTextWidth(G.text+m)<c||(G.text=G.text.slice(0,G.text.length-3)),this.textArr.splice(this.textArr.length-1,1),this._addTextLine(G.text+m));break}if((w=(w=w.slice(P)).trimLeft()).length>0&&(C=this._getTextWidth(w))<=c){this._addTextLine(w),d+=i,r=Math.max(r,C);break}}else this._addTextLine(w),d+=i,r=Math.max(r,C);if(s&&d+i>l)break}this.textHeight=e,this.textWidth=r},e.prototype.getStrokeScaleEnabled=function(){return!0},e}(s.Shape);e.Text=w,w.prototype._fillFunc=function(t){t.fillText(this._partialText,this._partialTextX,this._partialTextY)},w.prototype._strokeFunc=function(t){t.strokeText(this._partialText,this._partialTextX,this._partialTextY)},w.prototype.className="Text",w.prototype._attrsAffectingSize=["text","fontSize","padding","wrap","lineHeight"],l._registerNode(w),a.Factory.overWriteSetter(w,"width",c.getNumberOrAutoValidator()),a.Factory.overWriteSetter(w,"height",c.getNumberOrAutoValidator()),a.Factory.addGetterSetter(w,"fontFamily","Arial"),a.Factory.addGetterSetter(w,"fontSize",12,c.getNumberValidator()),a.Factory.addGetterSetter(w,"fontStyle",v),a.Factory.addGetterSetter(w,"fontVariant",v),a.Factory.addGetterSetter(w,"padding",0,c.getNumberValidator()),a.Factory.addGetterSetter(w,"align",g),a.Factory.addGetterSetter(w,"verticalAlign","top"),a.Factory.addGetterSetter(w,"lineHeight",1,c.getNumberValidator()),a.Factory.addGetterSetter(w,"wrap","word"),a.Factory.addGetterSetter(w,"ellipsis",!1,c.getBooleanValidator()),a.Factory.addGetterSetter(w,"letterSpacing",0,c.getNumberValidator()),a.Factory.addGetterSetter(w,"text","",c.getStringValidator()),a.Factory.addGetterSetter(w,"textDecoration",""),o.Collection.mapMethods(w)},2831:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(7339),c=r(3787),l=r(3774),d=r(4417),u="normal";function p(t){t.fillText(this.partialText,0,0)}function f(t){t.strokeText(this.partialText,0,0)}var g=function(t){function e(e){var r=t.call(this,e)||this;return r.dummyCanvas=o.Util.createCanvasElement(),r.dataArray=[],r.dataArray=h.Path.parsePathData(r.attrs.data),r.on("dataChange.konva",(function(){this.dataArray=h.Path.parsePathData(this.attrs.data),this._setTextData()})),r.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva",r._setTextData),e&&e.getKerning&&(o.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.'),r.kerningFunc(e.getKerning)),r._setTextData(),r}return n(e,t),e.prototype._sceneFunc=function(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",this.textBaseline()),t.setAttr("textAlign","left"),t.save();var e=this.textDecoration(),r=this.fill(),i=this.fontSize(),n=this.glyphInfo;"underline"===e&&t.beginPath();for(var o=0;o<n.length;o++){t.save();var a=n[o].p0;t.translate(a.x,a.y),t.rotate(n[o].rotation),this.partialText=n[o].text,t.fillStrokeShape(this),"underline"===e&&(0===o&&t.moveTo(0,i/2+1),t.lineTo(i,i/2+1)),t.restore()}"underline"===e&&(t.strokeStyle=r,t.lineWidth=i/20,t.stroke()),t.restore()},e.prototype._hitFunc=function(t){t.beginPath();var e=this.glyphInfo;if(e.length>=1){var r=e[0].p0;t.moveTo(r.x,r.y)}for(var i=0;i<e.length;i++){var n=e[i].p1;t.lineTo(n.x,n.y)}t.setAttr("lineWidth",this.fontSize()),t.setAttr("strokeStyle",this.colorKey),t.stroke()},e.prototype.getTextWidth=function(){return this.textWidth},e.prototype.getTextHeight=function(){return o.Util.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight},e.prototype.setText=function(t){return c.Text.prototype.setText.call(this,t)},e.prototype._getContextFont=function(){return c.Text.prototype._getContextFont.call(this)},e.prototype._getTextSize=function(t){var e=this.dummyCanvas.getContext("2d");e.save(),e.font=this._getContextFont();var r=e.measureText(t);return e.restore(),{width:r.width,height:parseInt(this.attrs.fontSize,10)}},e.prototype._setTextData=function(){var t=this,e=this._getTextSize(this.attrs.text),r=this.letterSpacing(),i=this.align(),n=this.kerningFunc();this.textWidth=e.width,this.textHeight=e.height;var o=Math.max(this.textWidth+((this.attrs.text||"").length-1)*r,0);this.glyphInfo=[];for(var a=0,s=0;s<t.dataArray.length;s++)t.dataArray[s].pathLength>0&&(a+=t.dataArray[s].pathLength);var l=0;"center"===i&&(l=Math.max(0,a/2-o/2)),"right"===i&&(l=Math.max(0,a-o));for(var d,u,p,f=c.stringToArray(this.text()),g=this.text().split(" ").length-1,y=-1,v=0,_=function(){v=0;for(var e=t.dataArray,r=y+1;r<e.length;r++){if(e[r].pathLength>0)return y=r,e[r];"M"===e[r].command&&(d={x:e[r].points[0],y:e[r].points[1]})}return{}},m=function(e){var n=t._getTextSize(e).width+r;" "===e&&"justify"===i&&(n+=(a-o)/g);var s=0,c=0;for(u=void 0;Math.abs(n-s)/n>.01&&c<20;){c++;for(var l=s;void 0===p;)(p=_())&&l+p.pathLength<n&&(l+=p.pathLength,p=void 0);if(p==={}||void 0===d)return;var f=!1;switch(p.command){case"L":h.Path.getLineLength(d.x,d.y,p.points[0],p.points[1])>n?u=h.Path.getPointOnLine(n,d.x,d.y,p.points[0],p.points[1],d.x,d.y):p=void 0;break;case"A":var y=p.points[4],m=p.points[5],b=p.points[4]+m;0===v?v=y+1e-8:n>s?v+=Math.PI/180*m/Math.abs(m):v-=Math.PI/360*m/Math.abs(m),(m<0&&v<b||m>=0&&v>b)&&(v=b,f=!0),u=h.Path.getPointOnEllipticalArc(p.points[0],p.points[1],p.points[2],p.points[3],v,p.points[6]);break;case"C":0===v?v=n>p.pathLength?1e-8:n/p.pathLength:n>s?v+=(n-s)/p.pathLength/2:v=Math.max(v-(s-n)/p.pathLength/2,0),v>1&&(v=1,f=!0),u=h.Path.getPointOnCubicBezier(v,p.start.x,p.start.y,p.points[0],p.points[1],p.points[2],p.points[3],p.points[4],p.points[5]);break;case"Q":0===v?v=n/p.pathLength:n>s?v+=(n-s)/p.pathLength:v-=(s-n)/p.pathLength,v>1&&(v=1,f=!0),u=h.Path.getPointOnQuadraticBezier(v,p.start.x,p.start.y,p.points[0],p.points[1],p.points[2],p.points[3])}void 0!==u&&(s=h.Path.getLineLength(d.x,d.y,u.x,u.y)),f&&(f=!1,p=void 0)}},b=l/(t._getTextSize("C").width+r)-1,x=0;x<b&&(m("C"),void 0!==d&&void 0!==u);x++)d=u;for(var S=0;S<f.length&&(m(f[S]),void 0!==d&&void 0!==u);S++){var w=h.Path.getLineLength(d.x,d.y,u.x,u.y),C=0;if(n)try{C=n(f[S-1],f[S])*this.fontSize()}catch(t){C=0}d.x+=C,u.x+=C,this.textWidth+=C;var P=h.Path.getPointOnLine(C+w/2,d.x,d.y,u.x,u.y),T=Math.atan2(u.y-d.y,u.x-d.x);this.glyphInfo.push({transposeX:P.x,transposeY:P.y,text:f[S],rotation:T,p0:d,p1:u}),d=u}},e.prototype.getSelfRect=function(){if(!this.glyphInfo.length)return{x:0,y:0,width:0,height:0};var t=[];this.glyphInfo.forEach((function(e){t.push(e.p0.x),t.push(e.p0.y),t.push(e.p1.x),t.push(e.p1.y)}));for(var e,r,i=t[0]||0,n=t[0]||0,o=t[1]||0,a=t[1]||0,s=0;s<t.length/2;s++)e=t[2*s],r=t[2*s+1],i=Math.min(i,e),n=Math.max(n,e),o=Math.min(o,r),a=Math.max(a,r);var h=this.fontSize();return{x:i-h/2,y:o-h/2,width:n-i+h,height:a-o+h}},e}(s.Shape);e.TextPath=g,g.prototype._fillFunc=p,g.prototype._strokeFunc=f,g.prototype._fillFuncHit=p,g.prototype._strokeFuncHit=f,g.prototype.className="TextPath",g.prototype._attrsAffectingSize=["text","fontSize","data"],d._registerNode(g),a.Factory.addGetterSetter(g,"data"),a.Factory.addGetterSetter(g,"fontFamily","Arial"),a.Factory.addGetterSetter(g,"fontSize",12,l.getNumberValidator()),a.Factory.addGetterSetter(g,"fontStyle",u),a.Factory.addGetterSetter(g,"align","left"),a.Factory.addGetterSetter(g,"letterSpacing",0,l.getNumberValidator()),a.Factory.addGetterSetter(g,"textBaseline","middle"),a.Factory.addGetterSetter(g,"fontVariant",u),a.Factory.addGetterSetter(g,"text",""),a.Factory.addGetterSetter(g,"textDecoration",null),a.Factory.addGetterSetter(g,"kerningFunc",null),o.Collection.mapMethods(g)},9516:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var n in e=arguments[r])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var a=r(8588),s=r(1455),h=r(7939),c=r(7955),l=r(5244),d=r(8985),u=r(4417),p=r(3774),f=r(4417),g=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].map((function(t){return t+".tr-konva"})).join(" "),y="nodesRect",v=["widthChange","heightChange","scaleXChange","scaleYChange","skewXChange","skewYChange","rotationChange","offsetXChange","offsetYChange","transformsEnabledChange","strokeWidthChange"].map((function(t){return t+".tr-konva"})).join(" "),_={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135},m="ontouchstart"in u.Konva._global,b=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];function x(t,e,r){var i=r.x+(t.x-r.x)*Math.cos(e)-(t.y-r.y)*Math.sin(e),n=r.y+(t.x-r.x)*Math.sin(e)+(t.y-r.y)*Math.cos(e);return o(o({},t),{rotation:t.rotation+e,x:i,y:n})}var S=function(t){function e(e){var r=t.call(this,e)||this;return r._transforming=!1,r._createElements(),r._handleMouseMove=r._handleMouseMove.bind(r),r._handleMouseUp=r._handleMouseUp.bind(r),r.update=r.update.bind(r),r.on(g,r.update),r.getNode()&&r.update(),r}return n(e,t),e.prototype.attachTo=function(t){return this.setNode(t),this},e.prototype.setNode=function(t){return a.Util.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."),this.setNodes([t])},e.prototype.getNode=function(){return this._nodes&&this._nodes[0]},e.prototype.setNodes=function(t){var e=this;return void 0===t&&(t=[]),this._nodes&&this._nodes.length&&this.detach(),this._nodes=t,1===t.length?this.rotation(t[0].rotation()):this.rotation(0),this._nodes.forEach((function(t){var r=t._attrsAffectingSize.map((function(t){return t+"Change.tr-konva"})).join(" "),i=function(){1===e.nodes().length&&e.rotation(e.nodes()[0].rotation()),e._resetTransformCache(),e._transforming||e.isDragging()||e.update()};t.on(r,i),t.on(v,i),t.on("_clearTransformCache.tr-konva",i),t.on("xChange.tr-konva yChange.tr-konva",i),e._proxyDrag(t)})),this._resetTransformCache(),!!this.findOne(".top-left")&&this.update(),this},e.prototype._proxyDrag=function(t){var e,r=this;t.on("dragstart.tr-konva",(function(i){e=t.getAbsolutePosition(),r.isDragging()||t===r.findOne(".back")||r.startDrag(i,!1)})),t.on("dragmove.tr-konva",(function(i){if(e){var n=t.getAbsolutePosition(),o=n.x-e.x,a=n.y-e.y;r.nodes().forEach((function(e){if(e!==t&&!e.isDragging()){var r=e.getAbsolutePosition();e.setAbsolutePosition({x:r.x+o,y:r.y+a}),e.startDrag(i)}})),e=null}}))},e.prototype.getNodes=function(){return this._nodes||[]},e.prototype.getActiveAnchor=function(){return this._movingAnchorName},e.prototype.detach=function(){this._nodes&&this._nodes.forEach((function(t){t.off(".tr-konva")})),this._nodes=[],this._resetTransformCache()},e.prototype._resetTransformCache=function(){this._clearCache(y),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},e.prototype._getNodeRect=function(){return this._getCache(y,this.__getNodeRect)},e.prototype.__getNodeShape=function(t,e,r){void 0===e&&(e=this.rotation());var i=t.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),n=t.getAbsoluteScale(r),o=t.getAbsolutePosition(r),a=i.x*n.x-t.offsetX()*n.x,s=i.y*n.y-t.offsetY()*n.y,h=(u.Konva.getAngle(t.getAbsoluteRotation())+2*Math.PI)%(2*Math.PI);return x({x:o.x+a*Math.cos(h)+s*Math.sin(-h),y:o.y+s*Math.cos(h)+a*Math.sin(h),width:i.width*n.x,height:i.height*n.y,rotation:h},-u.Konva.getAngle(e),{x:0,y:0})},e.prototype.__getNodeRect=function(){var t=this;if(!this.getNode())return{x:-1e8,y:-1e8,width:0,height:0,rotation:0};var e=[];this.nodes().map((function(r){var i=r.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:t.ignoreStroke()}),n=[{x:i.x,y:i.y},{x:i.x+i.width,y:i.y},{x:i.x+i.width,y:i.y+i.height},{x:i.x,y:i.y+i.height}],o=r.getAbsoluteTransform();n.forEach((function(t){var r=o.point(t);e.push(r)}))}));var r,i,n,o,s=new a.Transform;s.rotate(-u.Konva.getAngle(this.rotation())),e.forEach((function(t){var e=s.point(t);void 0===r&&(r=n=e.x,i=o=e.y),r=Math.min(r,e.x),i=Math.min(i,e.y),n=Math.max(n,e.x),o=Math.max(o,e.y)})),s.invert();var h=s.point({x:r,y:i});return{x:h.x,y:h.y,width:n-r,height:o-i,rotation:u.Konva.getAngle(this.rotation())}},e.prototype.getX=function(){return this._getNodeRect().x},e.prototype.getY=function(){return this._getNodeRect().y},e.prototype.getWidth=function(){return this._getNodeRect().width},e.prototype.getHeight=function(){return this._getNodeRect().height},e.prototype._createElements=function(){this._createBack(),b.forEach(function(t){this._createAnchor(t)}.bind(this)),this._createAnchor("rotater")},e.prototype._createAnchor=function(t){var e=this,r=new l.Rect({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:t+" _anchor",dragDistance:0,draggable:!0,hitStrokeWidth:m?10:"auto"}),i=this;r.on("mousedown touchstart",(function(t){i._handleMouseDown(t)})),r.on("dragstart",(function(t){r.stopDrag(),t.cancelBubble=!0})),r.on("dragend",(function(t){t.cancelBubble=!0})),r.on("mouseenter",(function(){var i=u.Konva.getAngle(e.rotation()),n=function(t,e){if("rotater"===t)return"crosshair";e+=a.Util._degToRad(_[t]||0);var r=(a.Util._radToDeg(e)%360+360)%360;return a.Util._inRange(r,337.5,360)||a.Util._inRange(r,0,22.5)?"ns-resize":a.Util._inRange(r,22.5,67.5)?"nesw-resize":a.Util._inRange(r,67.5,112.5)?"ew-resize":a.Util._inRange(r,112.5,157.5)?"nwse-resize":a.Util._inRange(r,157.5,202.5)?"ns-resize":a.Util._inRange(r,202.5,247.5)?"nesw-resize":a.Util._inRange(r,247.5,292.5)?"ew-resize":a.Util._inRange(r,292.5,337.5)?"nwse-resize":(a.Util.error("Transformer has unknown angle for cursor detection: "+r),"pointer")}(t,i);r.getStage().content.style.cursor=n,e._cursorChange=!0})),r.on("mouseout",(function(){r.getStage().content.style.cursor="",e._cursorChange=!1})),this.add(r)},e.prototype._createBack=function(){var t=this,e=new c.Shape({name:"back",width:0,height:0,draggable:!0,sceneFunc:function(t){var e=this.getParent(),r=e.padding();t.beginPath(),t.rect(-r,-r,this.width()+2*r,this.height()+2*r),t.moveTo(this.width()/2,-r),e.rotateEnabled()&&t.lineTo(this.width()/2,-e.rotateAnchorOffset()*a.Util._sign(this.height())-r),t.fillStrokeShape(this)},hitFunc:function(e,r){if(t.shouldOverdrawWholeArea()){var i=t.padding();e.beginPath(),e.rect(-i,-i,r.width()+2*i,r.height()+2*i),e.fillStrokeShape(r)}}});this.add(e),this._proxyDrag(e),e.on("dragstart",(function(t){t.cancelBubble=!0})),e.on("dragmove",(function(t){t.cancelBubble=!0})),e.on("dragend",(function(t){t.cancelBubble=!0}))},e.prototype._handleMouseDown=function(t){this._movingAnchorName=t.target.name().split(" ")[0];var e=this._getNodeRect(),r=e.width,i=e.height,n=Math.sqrt(Math.pow(r,2)+Math.pow(i,2));this.sin=Math.abs(i/n),this.cos=Math.abs(r/n),window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0),this._transforming=!0;var o=t.target.getAbsolutePosition(),a=t.target.getStage().getPointerPosition();this._anchorDragOffset={x:a.x-o.x,y:a.y-o.y},this._fire("transformstart",{evt:t,target:this.getNode()}),this.getNode()._fire("transformstart",{evt:t,target:this.getNode()})},e.prototype._handleMouseMove=function(t){var e,r,i,n=this.findOne("."+this._movingAnchorName),o=n.getStage();o.setPointersPositions(t);var a=o.getPointerPosition(),s={x:a.x-this._anchorDragOffset.x,y:a.y-this._anchorDragOffset.y},h=n.getAbsolutePosition();n.setAbsolutePosition(s);var c=n.getAbsolutePosition();if(h.x!==c.x||h.y!==c.y)if("rotater"!==this._movingAnchorName){var l=this.keepRatio()||t.shiftKey,d=this.centeredScaling()||t.altKey;if("top-left"===this._movingAnchorName){if(l){var p=d?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-right").x(),y:this.findOne(".bottom-right").y()};i=Math.sqrt(Math.pow(p.x-n.x(),2)+Math.pow(p.y-n.y(),2));var f=this.findOne(".top-left").x()>p.x?-1:1,g=this.findOne(".top-left").y()>p.y?-1:1;e=i*this.cos*f,r=i*this.sin*g,this.findOne(".top-left").x(p.x-e),this.findOne(".top-left").y(p.y-r)}}else if("top-center"===this._movingAnchorName)this.findOne(".top-left").y(n.y());else if("top-right"===this._movingAnchorName){l&&(p=d?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-left").x(),y:this.findOne(".bottom-left").y()},i=Math.sqrt(Math.pow(n.x()-p.x,2)+Math.pow(p.y-n.y(),2)),f=this.findOne(".top-right").x()<p.x?-1:1,g=this.findOne(".top-right").y()>p.y?-1:1,e=i*this.cos*f,r=i*this.sin*g,this.findOne(".top-right").x(p.x+e),this.findOne(".top-right").y(p.y-r));var y=n.position();this.findOne(".top-left").y(y.y),this.findOne(".bottom-right").x(y.x)}else"middle-left"===this._movingAnchorName?this.findOne(".top-left").x(n.x()):"middle-right"===this._movingAnchorName?this.findOne(".bottom-right").x(n.x()):"bottom-left"===this._movingAnchorName?(l&&(p=d?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-right").x(),y:this.findOne(".top-right").y()},i=Math.sqrt(Math.pow(p.x-n.x(),2)+Math.pow(n.y()-p.y,2)),f=p.x<n.x()?-1:1,g=n.y()<p.y?-1:1,e=i*this.cos*f,r=i*this.sin*g,n.x(p.x-e),n.y(p.y+r)),y=n.position(),this.findOne(".top-left").x(y.x),this.findOne(".bottom-right").y(y.y)):"bottom-center"===this._movingAnchorName?this.findOne(".bottom-right").y(n.y()):"bottom-right"===this._movingAnchorName?l&&(p=d?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-left").x(),y:this.findOne(".top-left").y()},i=Math.sqrt(Math.pow(n.x()-p.x,2)+Math.pow(n.y()-p.y,2)),f=this.findOne(".bottom-right").x()<p.x?-1:1,g=this.findOne(".bottom-right").y()<p.y?-1:1,e=i*this.cos*f,r=i*this.sin*g,this.findOne(".bottom-right").x(p.x+e),this.findOne(".bottom-right").y(p.y+r)):console.error(new Error("Wrong position argument of selection resizer: "+this._movingAnchorName));if(d=this.centeredScaling()||t.altKey){var v=this.findOne(".top-left"),_=this.findOne(".bottom-right"),m=v.x(),b=v.y(),S=this.getWidth()-_.x(),w=this.getHeight()-_.y();_.move({x:-m,y:-b}),v.move({x:S,y:w})}var C=this.findOne(".top-left").getAbsolutePosition();e=C.x,r=C.y;var P=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),T=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodesInto({x:e,y:r,width:P,height:T,rotation:u.Konva.getAngle(this.rotation())},t)}else{var k=this._getNodeRect();e=n.x()-k.width/2,r=-n.y()+k.height/2;var A=Math.atan2(-r,e)+Math.PI/2;k.height<0&&(A-=Math.PI);var O=u.Konva.getAngle(this.rotation())+A,M=u.Konva.getAngle(this.rotationSnapTolerance()),F=function(t,e){return x(t,e,function(t){return{x:t.x+t.width/2*Math.cos(t.rotation)+t.height/2*Math.sin(-t.rotation),y:t.y+t.height/2*Math.cos(t.rotation)+t.width/2*Math.sin(t.rotation)}}(t))}(k,function(t,e,r){for(var i=e,n=0;n<t.length;n++){var o=u.Konva.getAngle(t[n]),a=Math.abs(o-e)%(2*Math.PI);Math.min(a,2*Math.PI-a)<r&&(i=o)}return i}(this.rotationSnaps(),O,M)-k.rotation);this._fitNodesInto(F,t)}},e.prototype._handleMouseUp=function(t){this._removeEvents(t)},e.prototype.getAbsoluteTransform=function(){return this.getTransform()},e.prototype._removeEvents=function(t){if(this._transforming){this._transforming=!1,window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0);var e=this.getNode();this._fire("transformend",{evt:t,target:e}),e&&e.fire("transformend",{evt:t,target:e}),this._movingAnchorName=null}},e.prototype._fitNodesInto=function(t,e){var r=this,i=this._getNodeRect();if(a.Util._inRange(t.width,2*-this.padding()-1,1))this.update();else if(a.Util._inRange(t.height,2*-this.padding()-1,1))this.update();else{var n=new a.Transform;if(n.rotate(u.Konva.getAngle(this.rotation())),this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("left")>=0){var o=n.point({x:2*-this.padding(),y:0});t.x+=o.x,t.y+=o.y,t.width+=2*this.padding(),this._movingAnchorName=this._movingAnchorName.replace("left","right"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y}else this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("right")>=0&&(o=n.point({x:2*this.padding(),y:0}),this._movingAnchorName=this._movingAnchorName.replace("right","left"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y,t.width+=2*this.padding());if(this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("top")>=0?(o=n.point({x:0,y:2*-this.padding()}),t.x+=o.x,t.y+=o.y,this._movingAnchorName=this._movingAnchorName.replace("top","bottom"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y,t.height+=2*this.padding()):this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("bottom")>=0&&(o=n.point({x:0,y:2*this.padding()}),this._movingAnchorName=this._movingAnchorName.replace("bottom","top"),this._anchorDragOffset.x-=o.x,this._anchorDragOffset.y-=o.y,t.height+=2*this.padding()),this.boundBoxFunc()){var s=this.boundBoxFunc()(i,t);s?t=s:a.Util.warn("boundBoxFunc returned falsy. You should return new bound rect from it!")}var h=1e7,c=new a.Transform;c.translate(i.x,i.y),c.rotate(i.rotation),c.scale(i.width/h,i.height/h);var l=new a.Transform;l.translate(t.x,t.y),l.rotate(t.rotation),l.scale(t.width/h,t.height/h);var d=l.multiply(c.invert());this._nodes.forEach((function(t){var i,n=t.getParent().getAbsoluteTransform(),o=t.getTransform().copy();o.translate(t.offsetX(),t.offsetY());var s=new a.Transform;s.multiply(n.copy().invert()).multiply(d).multiply(n).multiply(o);var h=s.decompose();t.setAttrs(h),r._fire("transform",{evt:e,target:t}),t._fire("transform",{evt:e,target:t}),null===(i=t.getLayer())||void 0===i||i.batchDraw()})),this.rotation(a.Util._getRotation(t.rotation)),this._resetTransformCache(),this.update(),this.getLayer().batchDraw()}},e.prototype.forceUpdate=function(){this._resetTransformCache(),this.update()},e.prototype._batchChangeChild=function(t,e){this.findOne(t).setAttrs(e)},e.prototype.update=function(){var t,e=this,r=this._getNodeRect();this.rotation(a.Util._getRotation(r.rotation));var i=r.width,n=r.height,o=this.enabledAnchors(),s=this.resizeEnabled(),h=this.padding(),c=this.anchorSize();this.find("._anchor").each((function(t){t.setAttrs({width:c,height:c,offsetX:c/2,offsetY:c/2,stroke:e.anchorStroke(),strokeWidth:e.anchorStrokeWidth(),fill:e.anchorFill(),cornerRadius:e.anchorCornerRadius()})})),this._batchChangeChild(".top-left",{x:0,y:0,offsetX:c/2+h,offsetY:c/2+h,visible:s&&o.indexOf("top-left")>=0}),this._batchChangeChild(".top-center",{x:i/2,y:0,offsetY:c/2+h,visible:s&&o.indexOf("top-center")>=0}),this._batchChangeChild(".top-right",{x:i,y:0,offsetX:c/2-h,offsetY:c/2+h,visible:s&&o.indexOf("top-right")>=0}),this._batchChangeChild(".middle-left",{x:0,y:n/2,offsetX:c/2+h,visible:s&&o.indexOf("middle-left")>=0}),this._batchChangeChild(".middle-right",{x:i,y:n/2,offsetX:c/2-h,visible:s&&o.indexOf("middle-right")>=0}),this._batchChangeChild(".bottom-left",{x:0,y:n,offsetX:c/2+h,offsetY:c/2-h,visible:s&&o.indexOf("bottom-left")>=0}),this._batchChangeChild(".bottom-center",{x:i/2,y:n,offsetY:c/2-h,visible:s&&o.indexOf("bottom-center")>=0}),this._batchChangeChild(".bottom-right",{x:i,y:n,offsetX:c/2-h,offsetY:c/2-h,visible:s&&o.indexOf("bottom-right")>=0}),this._batchChangeChild(".rotater",{x:i/2,y:-this.rotateAnchorOffset()*a.Util._sign(n)-h,visible:this.rotateEnabled()}),this._batchChangeChild(".back",{width:i,height:n,visible:this.borderEnabled(),stroke:this.borderStroke(),strokeWidth:this.borderStrokeWidth(),dash:this.borderDash(),x:0,y:0}),null===(t=this.getLayer())||void 0===t||t.batchDraw()},e.prototype.isTransforming=function(){return this._transforming},e.prototype.stopTransform=function(){if(this._transforming){this._removeEvents();var t=this.findOne("."+this._movingAnchorName);t&&t.stopDrag()}},e.prototype.destroy=function(){return this.getStage()&&this._cursorChange&&(this.getStage().content.style.cursor=""),d.Group.prototype.destroy.call(this),this.detach(),this._removeEvents(),this},e.prototype.toObject=function(){return h.Node.prototype.toObject.call(this)},e}(d.Group);e.Transformer=S,S.prototype.className="Transformer",f._registerNode(S),s.Factory.addGetterSetter(S,"enabledAnchors",b,(function(t){return t instanceof Array||a.Util.warn("enabledAnchors value should be an array"),t instanceof Array&&t.forEach((function(t){-1===b.indexOf(t)&&a.Util.warn("Unknown anchor name: "+t+". Available names are: "+b.join(", "))})),t||[]})),s.Factory.addGetterSetter(S,"resizeEnabled",!0),s.Factory.addGetterSetter(S,"anchorSize",10,p.getNumberValidator()),s.Factory.addGetterSetter(S,"rotateEnabled",!0),s.Factory.addGetterSetter(S,"rotationSnaps",[]),s.Factory.addGetterSetter(S,"rotateAnchorOffset",50,p.getNumberValidator()),s.Factory.addGetterSetter(S,"rotationSnapTolerance",5,p.getNumberValidator()),s.Factory.addGetterSetter(S,"borderEnabled",!0),s.Factory.addGetterSetter(S,"anchorStroke","rgb(0, 161, 255)"),s.Factory.addGetterSetter(S,"anchorStrokeWidth",1,p.getNumberValidator()),s.Factory.addGetterSetter(S,"anchorFill","white"),s.Factory.addGetterSetter(S,"anchorCornerRadius",0,p.getNumberValidator()),s.Factory.addGetterSetter(S,"borderStroke","rgb(0, 161, 255)"),s.Factory.addGetterSetter(S,"borderStrokeWidth",1,p.getNumberValidator()),s.Factory.addGetterSetter(S,"borderDash"),s.Factory.addGetterSetter(S,"keepRatio",!0),s.Factory.addGetterSetter(S,"centeredScaling",!1),s.Factory.addGetterSetter(S,"ignoreStroke",!1),s.Factory.addGetterSetter(S,"padding",0,p.getNumberValidator()),s.Factory.addGetterSetter(S,"node"),s.Factory.addGetterSetter(S,"nodes"),s.Factory.addGetterSetter(S,"boundBoxFunc"),s.Factory.addGetterSetter(S,"shouldOverdrawWholeArea",!1),s.Factory.backCompat(S,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"}),a.Collection.mapMethods(S)},9846:function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=r(8588),a=r(1455),s=r(7955),h=r(4417),c=r(3774),l=r(4417),d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype._sceneFunc=function(t){t.beginPath(),t.arc(0,0,this.radius(),0,h.Konva.getAngle(this.angle()),this.clockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)},e.prototype.getWidth=function(){return 2*this.radius()},e.prototype.getHeight=function(){return 2*this.radius()},e.prototype.setWidth=function(t){this.radius(t/2)},e.prototype.setHeight=function(t){this.radius(t/2)},e}(s.Shape);e.Wedge=d,d.prototype.className="Wedge",d.prototype._centroid=!0,d.prototype._attrsAffectingSize=["radius"],l._registerNode(d),a.Factory.addGetterSetter(d,"radius",0,c.getNumberValidator()),a.Factory.addGetterSetter(d,"angle",0,c.getNumberValidator()),a.Factory.addGetterSetter(d,"clockwise",!1),a.Factory.backCompat(d,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),o.Collection.mapMethods(d)}},e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={exports:{}};return t[i].call(n.exports,n,n.exports,r),n.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t,e,i,n=r(185),o=r.n(n),a=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var i=Array(t),n=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,n++)i[n]=o[a];return i};function s(){var t=Math.min(U,I);return{height:Math.floor((200+Math.random()*t)/3),width:Math.floor((200+Math.random()*t)/3)}}function h(t,e){void 0===e&&(e=1);var r=e%t.length;return r<0&&(r+=t.length),a(t.slice(r,t.length),t.slice(0,r))}function c(t,e,r,i){return[{x:t,y:e,internalDir:{NE:!1,SE:!0,SW:!1,NW:!1}},{x:t+r,y:e,internalDir:{NE:!1,SE:!1,SW:!0,NW:!1}},{x:t+r,y:e+i,internalDir:{NE:!1,SE:!1,SW:!1,NW:!0}},{x:t,y:e+i,internalDir:{NE:!0,SE:!1,SW:!1,NW:!1}}]}function l(t,e){return t.x==e.x&&t.y==e.y}function d(t,e){return{NE:t.NE||e.NE,SE:t.SE||e.SE,SW:t.SW||e.SW,NW:t.NW||e.NW}}function u(t,e,r){return t.x==e.x&&e.x==r.x||t.y==e.y&&e.y==r.y}function p(t,e,r,i){return void 0===i&&(i=[]),t.length>e+r?a(t.slice(0,e),i,t.slice(e+r,t.length)):a(t.slice((e+r)%t.length,e),i)}function f(t,e){var r={x:e.x-t.x,y:e.y-t.y},i=S(Math.atan2(-r.y,r.x));return i<0?i+360:i}function g(t,e,r,i){var n=f(e,t),o=f(e,r);return o<n&&(o+=360),i<n&&(i+=360),n<=i&&i<=o}function y(t,e){return(t%=e)>0?t:t+e}function v(t){for(var e=0;e<t.length;e++)if(r=t[e],i=t[(e+1)%t.length],r.x!=i.x&&r.y!=i.y)throw new Error("Assertion that point was in line faild");var r,i}function _(t,e){if(0==j.length||0==t.length)throw new Error("Perimeter has no points!");v(t),v(j),console.log(j,e);var r,n,o,a=P(e[0]);if(2==e.length)console.log("two"),j=p(j,y(a+1,j.length),0,t);else if(3==e.length)console.log("three"),j=p(j,y(a+1,j.length),0,t.slice(1));else{if(4!=e.length)throw new Error("Invalid number of points to insert into");console.log("four"),j=p(j,y(a+1,j.length),2,t.slice(0,3))}for(var s=0;s<j.length;s++){var h=j[s],c=(s+1)%j.length,f=j[c],_=(s+2)%j.length,m=j[_],b=(s+3)%j.length;j[b],l(h,f)?(j[s].internalDir=d(h.internalDir,f.internalDir),j=p(j,c,1),s--):w(h,f,m)!=i.Back?u(h,f,m)&&(j=p(j,c,1),s--):(j=p(j,c,1),s--)}for(s=0;s<j.length;s++)h=j[s],c=(s+1)%j.length,f=j[c],_=(s+2)%j.length,m=j[_],f.internalDir={NE:g(n=h,r=f,o=m,45),NW:g(n,r,o,135),SW:g(n,r,o,225),SE:g(n,r,o,315)}}function m(t,r,i){var n;switch(i){case e.NORTH_WEST:n=t;break;case e.NORTH_EAST:n={x:t.x-r.width,y:t.y};break;case e.SOUTH_WEST:n={x:t.x,y:t.y-r.height};break;case e.SOUTH_EAST:n={x:t.x-r.width,y:t.y-r.height};break;default:throw new Error("Unimplemented")}var a=new(o().Rect)({x:n.x,y:n.y,height:r.height,width:r.width,fill:"hsl("+Math.floor(360*Math.random())+","+(50+Math.floor(50*Math.random()))+"%,"+(25+Math.floor(50*Math.random()))+"%)",stroke:"black",strokeWidth:1});N.add(a);var s=c(a.x(),a.y(),a.width(),a.height());switch(i){case e.NORTH_WEST:console.log("NW"),s=h(s,0);break;case e.SOUTH_WEST:console.log("SW"),s=h(s,3);break;case e.SOUTH_EAST:console.log("SE"),s=h(s,2);break;case e.NORTH_EAST:console.log("NE"),s=h(s,1);break;default:throw new Error("Unimplemented")}return[a,s]}function b(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function x(t,e,r){return b(t,r)+b(e,r)}function S(t){return 360*t/(2*Math.PI)}function w(t,e,r){var n,o,a,s,h,c=S((o=e,a=r,s={x:(n=t).x-o.x,y:n.y-o.y},h={x:a.x-o.x,y:a.y-o.y},Math.atan2(-s.y,s.x)-Math.atan2(-h.y,h.x)));return c<0&&(c+=360),c<45?i.Back:c<135?i.Left:c<225?i.Forward:c<315?i.Right:i.Back}function C(e,r){if(e.y==r.y&&e.x<r.x)return t.NORTH;if(e.x==r.x&&e.y<r.y)return t.EAST;if(e.y==r.y&&e.x>r.x)return t.SOUTH;if(e.x==r.x&&e.y>r.y)return t.WEST;throw function(t){for(var e=0;e<t.length;e++)M(t[e],e+"");N.draw()}(j),new Error("Cardinal Direction of line not found")}function P(t){for(var e=0;e<j.length;e++)if(l(j[e],t))return e;throw new Error("Point Not Found")}function T(t,e){if(t.x==e.x)return Math.abs(e.y-t.y);if(t.y==e.y)return Math.abs(e.x-t.x);throw new Error("Line not horizontal or vertical")}function k(t,e,r){return r*e/t}function A(r){var n,o,a,s,h,c,d,u,p,f,g,y,v,b,S,A=function(t){var e=function(){for(var t=0;t<j.length;t++){var e=j[t],r=(t+1)%j.length,n=j[r],o=(t+2)%j.length,a=j[o],s=(t+3)%j.length,h=j[s];if(w(e,n,a)==i.Left&&w(n,a,h)==i.Left)return[e,n,a,h]}return[]}();if(0!=e.length)return e;for(var r={a:j[0],b:j[1],distance:x(j[0],j[1],t),index:0},n=j[0],o=1;o<=j.length;o++){var a=j[o%j.length],s=x(n,a,t);s<r.distance&&(r.a=n,r.b=a,r.distance=s,r.index=o-1),n=a}var h=function(t,e){for(var r=0;r<j.length;r++){var n=j[r],o=(r+1)%j.length,a=j[o],s=(r+2)%j.length,h=j[s],c=(r+3)%j.length,d=j[c];if(l(t,a))return w(n,a,h)==i.Left?[n,a,h]:w(a,h,d)==i.Left?[a,h,d]:[]}return[]}(r.a,r.b);return 0!=h.length?h:[r.a,r.b]}({x:-G.x()+G.width()/2,y:-G.y()+G.height()/2});if(2==A.length){var O=(b=(v=A)[1].x-v[0].x,S=v[1].y-v[0].y,{x:Math.floor(v[0].x+b*Math.random()),y:Math.floor(v[0].y+S*Math.random())}),M=C(A[0],A[1]),F=(P(A[0]),null),E=[];switch(M){case t.NORTH:F=(n=m(O,r,e.SOUTH_WEST))[0],E=n[1];break;case t.EAST:F=(o=m(O,r,e.NORTH_WEST))[0],E=o[1];break;case t.SOUTH:F=(a=m(O,r,e.NORTH_EAST))[0],E=a[1];break;case t.WEST:F=(s=m(O,r,e.SOUTH_EAST))[0],E=s[1]}null!=F&&(_(E,A),N.add(F))}else if(3==A.length){var D=A[1];switch(F=null,E=[],C(A[0],A[1])){case t.NORTH:F=(h=m(D,r,e.SOUTH_EAST))[0],E=h[1];break;case t.EAST:F=(c=m(D,r,e.SOUTH_WEST))[0],E=c[1];break;case t.SOUTH:F=(d=m(D,r,e.NORTH_WEST))[0],E=d[1];break;case t.WEST:F=(u=m(D,r,e.NORTH_EAST))[0],E=u[1]}null!=F&&(_(E,A),N.add(F))}else{if(4!=A.length)throw new Error("Invalid amount of points from where to place new rectangle");D=A[1];var R=C(A[1],A[2]),L=function(e,r){var i=C(r[1],r[2]),n=T(r[1],r[2]),o=Math.min(T(r[0],r[1]),T(r[2],r[3]));switch(i){case t.SOUTH:case t.NORTH:return{height:o,width:n};case t.EAST:case t.WEST:return{height:n,width:o}}switch(i){case t.SOUTH:case t.NORTH:return{height:Math.round(k(e.width,e.height,n)),width:n};case t.EAST:case t.WEST:return{height:n,width:Math.round(k(e.height,e.width,n))}}}(r,A);switch(F=null,E=[],console.log("areas",L,A),R){case t.NORTH:F=(p=m(D,L,e.SOUTH_WEST))[0],E=p[1];break;case t.EAST:F=(f=m(D,L,e.NORTH_WEST))[0],E=f[1];break;case t.SOUTH:F=(g=m(D,L,e.NORTH_EAST))[0],E=g[1];break;case t.WEST:F=(y=m(D,L,e.SOUTH_EAST))[0],E=y[1]}null!=F&&(_(E,A),N.add(F))}}function O(t,e,r,i){var n=t.x,a=t.y,s=new(o().Circle)({x:n,y:a,radius:6,fill:e,stroke:r,strokeWidth:4});if(N.add(s),i){var h=new(o().Text)({x:n+10,y:a-20,text:i,fontSize:20,fontFamily:"Calibri",fill:"black"});N.add(h)}N.draw()}function M(t,e){var r=t.x,i=t.y;if(e?O(t,"white","black",e):O(t,"white","black"),t.internalDir.NE){var n=new(o().Arrow)({x:r,y:i,points:[0,0,25,-25],pointerLength:10,pointerWidth:10,fill:"black",stroke:"black",strokeWidth:1});N.add(n)}t.internalDir.SE&&(n=new(o().Arrow)({x:r,y:i,points:[0,0,25,25],pointerLength:10,pointerWidth:10,fill:"black",stroke:"black",strokeWidth:1}),N.add(n)),t.internalDir.SW&&(n=new(o().Arrow)({x:r,y:i,points:[0,0,-25,25],pointerLength:10,pointerWidth:10,fill:"black",stroke:"black",strokeWidth:1}),N.add(n)),t.internalDir.NW&&(n=new(o().Arrow)({x:r,y:i,points:[0,0,-25,-25],pointerLength:10,pointerWidth:10,fill:"black",stroke:"black",strokeWidth:1}),N.add(n))}function F(t,e){for(var r=t.x,i=t.y,n=!1,o=0,a=e.length-1;o<e.length;a=o++){var s=e[o].x,h=e[o].y,c=e[a].x,l=e[a].y;h>i!=l>i&&r<(c-s)*(i-h)/(l-h)+s&&(n=!n)}return n}function E(){var t=[{x:-100-G.x(),y:-100-G.y()},{x:-100-G.x()+I,y:-100-G.y()},{x:100-G.x()+I,y:100-G.y()+U},{x:-100-G.x(),y:100-G.y()+U}];console.log();for(var e=0;e<t.length;e++){var r=t[e];if(console.log(F(r,j),t),!F(r,j))return!1}return!0}!function(t){t[t.NORTH=1]="NORTH",t[t.EAST=2]="EAST",t[t.SOUTH=3]="SOUTH",t[t.WEST=4]="WEST"}(t||(t={})),function(t){t[t.NORTH_EAST=0]="NORTH_EAST",t[t.SOUTH_EAST=1]="SOUTH_EAST",t[t.SOUTH_WEST=2]="SOUTH_WEST",t[t.NORTH_WEST=3]="NORTH_WEST"}(e||(e={})),function(t){t[t.Left=-1]="Left",t[t.Forward=0]="Forward",t[t.Right=1]="Right",t[t.Back=2]="Back"}(i||(i={}));var N,G,D,R,L,I=window.innerWidth,U=window.innerHeight,j=[];N=new(o().Layer),G=new(o().Stage)({container:"container",width:I,height:U,draggable:!0}),function(){for(var t=[],e=0;e<25;e++)t.push(s())}(),D=s(),L=(R=m({x:Math.floor(G.width()/2-D.width/2),y:Math.floor(G.height()/2-D.height/2)},D,e.NORTH_WEST))[0],R[1],j=c(L.x(),L.y(),L.width(),L.height()),G.add(N),setTimeout((function t(){for(;!E();)A(s());N.draw(),setTimeout(t,500)}),500)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,